{
  "openapi": "3.0.1",
  "info": {
    "title": "Partner API",
    "description": "This is the most current API version",
    "version": "v3"
  },
  "servers": [
    {
      "url": "https://api-sandbox.made.com/v3",
      "description": "Stage Sandbox Server"
    },
    { "url": "https://api.made.com/v3", "description": "Live Server" }
  ],
  "security": [
    { "ApiKey": [] },
    { "AuthSignature": [] },
    { "AuthNonce": [] },
    { "AuthTimestamp": [] },
    { "AuthVersion": [] }
  ],
  "paths": {
    "/api/account/{account-number}/balance": {
      "get": {
        "tags": ["Account"],
        "summary": "Get Balance",
        "description": "Find an account balance by account number",
        "parameters": [
          {
            "name": "account-number",
            "in": "path",
            "description": "Required. The Made, LLC account number of your query.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Balance inquiry was successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BalanceResponse" }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/account/{account-number}/loan/balance": {
      "get": {
        "tags": ["Account"],
        "summary": "Get Loan Balance",
        "description": "Find a loan account balance by account number",
        "operationId": "GetLoanBalance",
        "parameters": [
          {
            "name": "account-number",
            "in": "path",
            "description": "Required. The Made, LLC account number of your query.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Loan balance inquiry was successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoanBalanceResponse" }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/account/{account-number}/cash-manager/balance": {
      "get": {
        "tags": ["Account"],
        "summary": "Get Cash Manager Account Balance",
        "description": "Find a cash manager account balance by account number",
        "parameters": [
          {
            "name": "account-number",
            "in": "path",
            "description": "Required. The Made, LLC account number of your query.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Balance inquiry was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashManagerBalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/account/{account-number}/history": {
      "get": {
        "tags": ["Account"],
        "summary": "Get History",
        "description": "Find an account history by account number <br /><br />For header details to rollback to v2 unique_id during migration, see https://developers.made.com/reference/options-for-unique_id-to-assist-v2-v3-migration.",
        "parameters": [
          {
            "name": "account-number",
            "in": "path",
            "description": "Required. The Made, LLC account number of your query.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "begin-date",
            "in": "query",
            "description": "Optional. The beginning date range for history query; a blank value will default to current day. Note - date fields ignored when is-real-time = true.",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "end-date",
            "in": "query",
            "description": "Optional. The ending date range for the history query; a blank value will default to current day. Note - date fields ignored when is-real-time = true.",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "sort-order",
            "in": "query",
            "description": "Optional. Sort order for returned records (Ascending/Asc/A or Descending/Desc/D). Defaults to A.",
            "schema": { "type": "string", "default": "A" }
          },
          {
            "name": "unique-id",
            "in": "query",
            "description": "Optional. An identifier for any transaction that posts to the account.",
            "schema": { "type": "string", "default": "" }
          },
          {
            "name": "payment-id",
            "in": "query",
            "description": "Optional. An identifier for any transaction processed via payment rails including US fed wires or swift payments. Date range must include date of corresponding transaction.",
            "schema": { "type": "string", "default": "" }
          },
          {
            "name": "is-real-time",
            "in": "query",
            "description": "Optional. Set to \"true\" to bypass date params and view latest transactions in real-time (50 transactions maximum); Set to \"false\" to view paginated database history, less than 30 seconds delayed. Defaults to false.",
            "schema": { "type": "boolean", "default": false }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "Optional. Used with page-size to choose a specific page of records to display; defaults to 1.",
            "schema": { "type": "integer", "format": "int32", "default": 1 }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "Optional. When is-real-time flag is \"false,\" page-size designates a number of records per page; defaults to 1000.",
            "schema": { "type": "integer", "format": "int32", "default": 1000 }
          }
        ],
        "responses": {
          "200": {
            "description": "Balance History was successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HistoryResponse" }
              }
            }
          },
          "204": {
            "description": "No content found for specified date range or query key"
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/account/list": {
      "get": {
        "tags": ["Account"],
        "summary": "Get Accounts",
        "description": "Retrieve a list of accounts permissioned to a subscription key, along with services enabled to each account via this subscription",
        "responses": {
          "200": {
            "description": "Account list inquiry was successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerAccountList" }
              }
            }
          },
          "204": {
            "description": "No content found for specified date range or query key"
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/connections": {
      "get": {
        "tags": ["Connections"],
        "summary": "Get External Connections",
        "description": "Get all saved counterparty payment details, including owned external connections<br /><br />For details on retrieving HATEOS links, see https://developers.made.com/reference/hateoas.",
        "operationId": "Get Connections",
        "parameters": [
          {
            "name": "trade-id",
            "in": "query",
            "description": "Optional. The unique id received from a successful POST/quote (marketorder) or POST/trade message",
            "schema": { "type": "integer" }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "Optional. Use a desired currency's ISO code to only see connections with accounts in that currency",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Connections inquiry was successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConnectionsResponse" }
              },
              "application/vnd.made.connections+json": {
                "schema": { "$ref": "#/components/schemas/ConnectionsResponse" }
              },
              "application/vnd.made.connections.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/ConnectionsResponse" }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.connections+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.connections.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.connections+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.connections.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.connections+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.connections.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/connections#": {
      "get": {
        "tags": ["Connections"],
        "summary": "Get External Connections for Contacts",
        "description": "Get saved payment details for external counterparties only <br /><br />For details on retrieving HATEOS links, see https://developers.made.com/reference/hateoas.",
        "operationId": "Get Connections - Contacts",
        "parameters": [
          {
            "name": "trade-id",
            "in": "query",
            "description": "Optional. The unique id received from a successful POST/quote (marketorder) or POST/trade message",
            "schema": { "type": "integer" }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "Optional. Use a desired currency's ISO code to only see connections with accounts in that currency",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Connections inquiry was successful",
            "content": {
              "application/vnd.made.contacts+json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactsListResponse"
                }
              },
              "application/vnd.made.contacts.hateoas+json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/vnd.made.contacts+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.contacts.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/vnd.made.contacts+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.contacts.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.made.contacts+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.contacts.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/connections##": {
      "get": {
        "tags": ["Connections"],
        "summary": "Get External Connections for External Accounts",
        "description": "Get saved payment details for owned external accounts only<br /><br />For details on retrieving HATEOS links, see https://developers.made.com/reference/hateoas.",
        "operationId": "Get Connections - External Accounts",
        "parameters": [
          {
            "name": "trade-id",
            "in": "query",
            "description": "Optional. The unique id received from a successful POST/quote (marketorder) or POST/trade message",
            "schema": { "type": "integer" }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "Optional. Use a desired currency's ISO code to only see connections with accounts in that currency",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Connections inquiry was successful",
            "content": {
              "application/vnd.made.externalaccounts+json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnedExternalAccountsListResponse"
                }
              },
              "application/vnd.made.externalaccounts.hateoas+json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnedExternalAccountsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/vnd.made.externalaccounts+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.externalaccounts.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/vnd.made.externalaccounts+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.externalaccounts.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.made.externalaccounts+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.externalaccounts.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/fx/quote": {
      "post": {
        "tags": ["Fx"],
        "summary": "FX RFQ",
        "description": "Request for quote on real-time rate of foreign currency trade <br /><br />For details on retrieving HATEOS links, see https://developers.made.com/reference/hateoas.",
        "operationId": "Quote",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/QuoteRequest" }
            },
            "text/json": {
              "schema": { "$ref": "#/components/schemas/QuoteRequest" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/QuoteRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.made.qoute+json": {
                "schema": { "$ref": "#/components/schemas/QuoteResponse" }
              },
              "application/vnd.made.quote.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/QuoteResponse" }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/vnd.made.qoute+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.quote.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/vnd.made.qoute+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.quote.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.made.qoute+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.quote.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/fx/quote#": {
      "post": {
        "tags": ["Fx"],
        "summary": "FX Execute Market Order",
        "description": "Execute a market order.<br /><br />For details on retrieving HATEOS links, see https://developers.made.com/reference/hateoas.",
        "operationId": "MarketOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/QuoteRequest" }
            },
            "text/json": {
              "schema": { "$ref": "#/components/schemas/QuoteRequest" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/QuoteRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.made.marketorder+json": {
                "schema": { "$ref": "#/components/schemas/MarketOrderResponse" }
              },
              "application/vnd.made.marketorder.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/MarketOrderResponse" }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/vnd.made.marketorder+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.marketorder.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/vnd.made.marketorder+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.marketorder.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.made.marketorder+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.marketorder.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/fx/internal/quote": {
      "post": {
        "tags": ["Fx"],
        "summary": "FX Internal RFQ",
        "description": "Request for quote on real-time rate of foreign currency trade for two owned accounts <br /><br />For details on retrieving HATEOS links, see https://developers.made.com/reference/hateoas.",
        "operationId": "QuoteInternal",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InternalQuoteRequest" }
            },
            "text/json": {
              "schema": { "$ref": "#/components/schemas/InternalQuoteRequest" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/InternalQuoteRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalQuoteResponse"
                }
              },
              "application/vnd.made.internalqoute+json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalQuoteResponse"
                }
              },
              "application/vnd.made.internalqoute.hateoas+json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalQuoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.internalqoute+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.internalqoute.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.internalqoute+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.internalqoute.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.internalqoute+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.internalqoute.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/fx/internal/quote#": {
      "post": {
        "tags": ["Fx"],
        "summary": "FX Execute Internal Market Order",
        "description": "Execute a market order on two owned accounts.<br /><br />For details on retrieving HATEOS links, see https://developers.made.com/reference/hateoas.",
        "operationId": "MarketOrderInternal",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InternalQuoteRequest" }
            },
            "text/json": {
              "schema": { "$ref": "#/components/schemas/InternalQuoteRequest" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/InternalQuoteRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.made.internalmarketorder+json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalMarketOrderResponse"
                }
              },
              "application/vnd.made.internalmarketorder.hateoas+json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalMarketOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/vnd.made.internalmarketorder+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.internalmarketorder.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/vnd.made.internalmarketorder+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.internalmarketorder.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.made.internalmarketorder+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.internalmarketorder.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/fx/trade": {
      "get": {
        "tags": ["Fx"],
        "summary": "Get Trades",
        "description": "Get details for trades within a specific date range for an account<br /><br />For details on retrieving HATEOS links, see https://developers.made.com/reference/hateoas.",
        "operationId": "Get Trades",
        "parameters": [
          {
            "name": "account-number",
            "in": "query",
            "description": "Optional. Account number for the request",
            "schema": { "type": "string" }
          },
          {
            "name": "sort-order",
            "in": "query",
            "description": "Optional. Sort order for returned records (Ascending/Asc/A or Descending/Desc/D). Defaults to A.",
            "schema": { "type": "string", "default": "A" }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Optional. Designate a particular source (1 = Partner Api, 2 = made Portal) to display only trades executed via that channel.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "begin-date",
            "in": "query",
            "description": "Optional. The beginning date range for history query; a blank value will default to current day. Note - date fields ignored when is-real-time = true.",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "end-date",
            "in": "query",
            "description": "Optional. The ending date range for the history query; a blank value will default to current day. Note - date fields ignored when is-real-time = true.",
            "schema": { "type": "string", "format": "date-time" }
          }
        ],
        "responses": {
          "200": {
            "description": "GET request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TradeListResponse" }
                }
              },
              "application/vnd.made.trade+json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TradeListResponse" }
                }
              },
              "application/vnd.made.trade.hateoas+json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TradeListResponse" }
                }
              }
            }
          },
          "204": { "description": "Success" },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.trade+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.trade.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.trade+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.trade.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.trade+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.trade.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      },
      "post": {
        "tags": ["Fx"],
        "summary": "Execute FX Trade",
        "description": "Execute foreign currency trade using an existing quote.<br /><br />For details on retrieving HATEOS links, see https://developers.made.com/reference/hateoas.",
        "operationId": "Trade",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TradeExecutionRequest" }
            },
            "text/json": {
              "schema": { "$ref": "#/components/schemas/TradeExecutionRequest" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/TradeExecutionRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trade request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeExecutionResponse"
                }
              },
              "application/vnd.made.tradeexecution+json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeExecutionResponse"
                }
              },
              "application/vnd.made.tradeexecution.hateoas+json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeExecutionResponse"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.tradeexecution+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.tradeexecution.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.tradeexecution+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.tradeexecution.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.tradeexecution+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.tradeexecution.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/fx/internal/trade": {
      "post": {
        "tags": ["Fx"],
        "summary": "Execute FX Internal Trade",
        "description": "Execute foreign currency trade using an existing internal quote.<br /><br />For details on retrieving HATEOS links, see https://developers.made.com/reference/hateoas.",
        "operationId": "TradeInternal",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InternalTradeExecutionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InternalTradeExecutionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InternalTradeExecutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trade request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalTradeExecutionResponse"
                }
              },
              "application/vnd.made.internaltradeexecution+json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalTradeExecutionResponse"
                }
              },
              "application/vnd.made.internaltradeexecution.hateoas+json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalTradeExecutionResponse"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.internaltradeexecution+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.internaltradeexecution.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.internaltradeexecution+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.internaltradeexecution.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.internaltradeexecution+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.internaltradeexecution.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/fx/trade/{trade-id}": {
      "get": {
        "tags": ["Fx"],
        "summary": "Get Trade",
        "description": "Get an executed trade by Trade ID <br /><br />For details on retrieving HATEOS links, see https://developers.made.com/reference/hateoas.",
        "operationId": "Get Trade",
        "parameters": [
          {
            "name": "trade-id",
            "in": "path",
            "description": "Required. The unique id received from a successful POST/quote (marketorder) or POST/trade message.",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "GET request was successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TradeResponse" }
              },
              "application/vnd.made.trade+json": {
                "schema": { "$ref": "#/components/schemas/TradeResponse" }
              },
              "application/vnd.made.trade.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/TradeResponse" }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.trade+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.trade.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.trade+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.trade.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.trade+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.trade.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/fx/payment": {
      "post": {
        "tags": ["Fx"],
        "summary": "Create FX Payment",
        "description": "Initiates an FX payment for an executed Trade ID, using a saved external_account_id <br /><br />For details on retrieving HATEOS links, see https://developers.made.com/reference/hateoas.",
        "operationId": "Payment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/FxPaymentRequest" }
            },
            "application/vnd.made.fxpaymentrequest+json": {
              "schema": { "$ref": "#/components/schemas/FxPaymentRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              },
              "application/vnd.made.fxpayment+json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              },
              "application/vnd.made.fxpayment.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.fxpayment+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.fxpayment.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.fxpayment+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.fxpayment.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.fxpayment+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.fxpayment.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/fx/payment#": {
      "post": {
        "tags": ["Fx"],
        "summary": "Create FX Adhoc Payment",
        "description": "Initiates an FX payment for an executed Trade ID, using keyed in beneficiary details <br /><br />For details on retrieving HATEOS links, see https://developers.made.com/reference/hateoas.",
        "operationId": "AdhocPayment",
        "requestBody": {
          "content": {
            "application/vnd.made.adhocfxpaymentrequest+json": {
              "schema": { "$ref": "#/components/schemas/FxAdhocPaymentRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              },
              "application/vnd.made.fxpayment+json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              },
              "application/vnd.made.fxpayment.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.fxpayment+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.fxpayment.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.fxpayment+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.fxpayment.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.fxpayment+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.fxpayment.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/payment": {
      "get": {
        "tags": ["Payment"],
        "summary": "Get Payments",
        "description": "Retrieves detailed data for all payments within specified date range",
        "operationId": "GetPayments",
        "parameters": [
          {
            "name": "account-number",
            "in": "query",
            "description": "Account number for the request",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "begin-date",
            "in": "query",
            "description": "Required. The begin date range for payments query, which queries the Response entry_date. Timestamp does not factor.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": false
            }
          },
          {
            "name": "end-date",
            "in": "query",
            "description": "Optional. The ending date range for the payments query, which queries the Response entry_date. A blank value will default to current day. \"End_date\" must be within 32 days of \"begin_date\" and timestamp does not factor.",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "sort-order",
            "in": "query",
            "description": "Optional. Sort order for returned records (Ascending/Asc/A or Descending/Desc/D). Defaults to D.",
            "schema": { "type": "string", "default": "D" }
          },
          {
            "name": "page-size",
            "in": "query",
            "description": "Optional. The page-size designates a number of records per page; defaults to 500, which is the maximum.",
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "page-number",
            "in": "query",
            "description": "Optional. Used with page-size to choose a specific page of records to display; defaults to 1.",
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Payments inquiry was successful",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentInfoListResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentInfoListResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentInfoListResponse"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No content found for specified date range or query key"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      },
      "post": {
        "tags": ["Payment"],
        "summary": "Create Payment",
        "description": "Initiates a wire or SWIFT payment",
        "operationId": "PostPayment",
        "requestBody": {
          "description": "<h2 style=\"color: #00BCF8;\">Initiate Payment Model</h2>\r\n<style>\r\n             table, td{\r\n                border: 1px solid black;border-collapse: collapse; text-align: left;\r\n            }\r\n            th{\r\n                border: 1px solid black;border-collapse: collapse; text-align: center;\r\n            }\r\n            td{\r\n                 padding-right: 2px; padding-left:2px;\r\n            }\r\n            </style>\r\n<table width=\"1258\">\r\n  <tbody>\r\n    <tr>\r\n      <th width=\"165\">Field Name</th>\r\n      <th width=\"773\">Description</th>\r\n      <th width=\"70\">Data Type</th>\r\n      <th width=\"75\">Max Length</th>\r\n      <th width=\"100\">Sample</th>\r\n      <th width=\"75\">Opt/Req</th>\r\n    </tr>\r\n    <tr>\r\n      <td>originator_account_number</td>\r\n      <td>The account from which the sending dollar amount debit will occur</td>\r\n      <td>string</td>\r\n      <td>20</td>\r\n      <td>999999999999</td>\r\n      <td>Required</td>\r\n    </tr>\r\n    <tr>\r\n      <td>amount</td>\r\n      <td>The US dollar amount of the transfer</td>\r\n      <td>decimal</td>\r\n      <td>13</td>\r\n      <td>250.50</td>\r\n      <td>Required</td>\r\n    </tr>\r\n    <tr>\r\n      <td>receiving_bank_routing_id</td>\r\n      <td>The ABA number of the receiving bank facilitating the transfer</td>\r\n      <td>string</td>\r\n      <td>9</td>\r\n      <td>123456789</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>receiving_bank_name</td>\r\n      <td>The name of the receiving bank</td>\r\n      <td>string</td>\r\n      <td>35</td>\r\n      <td>Users Bank</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>receiving_bank_address1</td>\r\n      <td>The address of the receiving bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>2200 Break St.</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>receiving_bank_address2</td>\r\n      <td>The address of the receiving bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>#3</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>receiving_bank_address3</td>\r\n      <td>The address of the receiving bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>CA, USA</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>intermediary_bank_type</td>\r\n      <td>Routing method for ultimate destination of funds</td>\r\n      <td>String</td>\r\n      <td>5</td>\r\n      <td>ABA, SWIFT</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>intermediary_bank_routing_id</td>\r\n      <td>The SWIFT or ABA or Account number of the intermediary bank facilitating the transfer</td>\r\n      <td>String</td>\r\n      <td>11</td>\r\n      <td>123456789</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>intermediary_bank_name</td>\r\n      <td>The name of the intermediary bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>End Bank</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>intermediary_bank_address1</td>\r\n      <td>The address of the intermediary bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>2200 Break St.</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>intermediary_bank_address2</td>\r\n      <td>The address of the intermediary bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>#4</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>intermediary_bank_address3</td>\r\n      <td>The address of the intermediary bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>CA, USA</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_bank_type</td>\r\n      <td>Routing method for ultimate destination of funds</td>\r\n      <td>String</td>\r\n      <td>5</td>\r\n      <td>ABA, SWIFT</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_bank_routing_id</td>\r\n      <td>This is either the ABA routing number of the beneficiary bank or the SWIFT BIC (Bank Identifier Code) or Account Number</td>\r\n      <td>String</td>\r\n      <td>11</td>\r\n      <td>123456789</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_bank_name</td>\r\n      <td>The name of the beneficiary bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td></td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_bank_address1</td>\r\n      <td>The address of the beneficiary bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>2200 Break St.</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_bank_address2</td>\r\n      <td>The address of the beneficiary bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>#3</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_bank_address3</td>\r\n      <td>The address of the beneficiary bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>CA, USA</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_name</td>\r\n      <td>The name of the beneficiary</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>Receivers Bank</td>\r\n      <td>Required</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_account_number</td>\r\n      <td>The account number of the beneficiary</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td></td>\r\n      <td>Required</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_address1</td>\r\n      <td>The address of the beneficiary</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>19567 Some St.</td>\r\n      <td>Required</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_address2</td>\r\n      <td>The address of the beneficiary</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>#789</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_address3</td>\r\n      <td>The address of the beneficiary</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>Phoenix, AZ USA</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>originator_to_beneficiary_info</td>\r\n      <td>Comments field can be used to send reference codes</td>\r\n      <td>String</td>\r\n      <td>140</td>\r\n      <td></td>\r\n      <td>Optional</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n<h2 style=\"color: #00BCF8;\">Initiate Payment Response</h2>\r\n<table width=\"1258\">\r\n  <thead>\r\n    <tr>\r\n      <th width=\"165\">Field Name</th>\r\n      <th width=\"773\">Description</th>\r\n      <th width=\"70\">Data Type</th>\r\n      <th width=\"75\">Max Length</th>\r\n      <th width=\"175\">Sample</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>payment_id</td>\r\n      <td>Unique identifier assigned by the bank's payment system. It can be used with GET payment to query for a  specific transaction. It is required when using PUT payment to approve, cancel, or return an incoming payment. It is also added to the GET account/history request and response so that it can be used to reference the transaction in the wire system with the associated transaction when it hits the bank account.</td>\r\n      <td>string</td>\r\n      <td align=\"right\">20</td>\r\n      <td>J012345678ABCDEF</td>\r\n    </tr>\r\n    <tr>\r\n      <td>status</td>\r\n      <td>Value indicating status of the payment. Possible values include: \"Pre-Approval\",\"In-Progress\",\"Canceled\", or \"Complete\"</td>\r\n      <td>string</td>\r\n      <td align=\"right\">20</td>\r\n      <td>Pre-Approval</td>\r\n    </tr>\r\n    <tr>\r\n      <td>timestamp</td>\r\n      <td>Most recent timestamp when the status of the payment changed. This value is required along with the payment_id in order to use the PUT operation.</td>\r\n      <td>date time</td>\r\n      <td align=\"right\">23</td>\r\n      <td>YYYY-MM-DD 00:00:00.000</td>\r\n    </tr>\r\n  </tbody>\r\n</table>",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PaymentRequest" }
            },
            "text/json": {
              "schema": { "$ref": "#/components/schemas/PaymentRequest" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/PaymentRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment initiated successfully (Note that if idempotent request repeated, will also generate 201)",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/payment/backup": {
      "post": {
        "tags": ["Payment"],
        "summary": "Create Payment BCP",
        "description": "Initiates a BCP payment record",
        "operationId": "PostPaymentBackup",
        "requestBody": {
          "description": "<h2 style=\"color: #00BCF8;\">Initiate Payment Model</h2>\r\n<style>\r\n             table, td{\r\n                border: 1px solid black;border-collapse: collapse; text-align: left;\r\n            }\r\n            th{\r\n                border: 1px solid black;border-collapse: collapse; text-align: center;\r\n            }\r\n            td{\r\n                 padding-right: 2px; padding-left:2px;\r\n            }\r\n            </style>\r\n<table width=\"1258\">\r\n  <tbody>\r\n    <tr>\r\n      <th width=\"165\">Field Name</th>\r\n      <th width=\"773\">Description</th>\r\n      <th width=\"70\">Data Type</th>\r\n      <th width=\"75\">Max Length</th>\r\n      <th width=\"100\">Sample</th>\r\n      <th width=\"75\">Opt/Req</th>\r\n    </tr>\r\n    <tr>\r\n      <td>originator_account_number</td>\r\n      <td>The account from which the sending dollar amount debit will occur</td>\r\n      <td>string</td>\r\n      <td>20</td>\r\n      <td>999999999999</td>\r\n      <td>Required</td>\r\n    </tr>\r\n    <tr>\r\n      <td>amount</td>\r\n      <td>The US dollar amount of the transfer</td>\r\n      <td>decimal</td>\r\n      <td>13</td>\r\n      <td>250.50</td>\r\n      <td>Required</td>\r\n    </tr>\r\n    <tr>\r\n      <td>receiving_bank_routing_id</td>\r\n      <td>The ABA number of the receiving bank facilitating the transfer</td>\r\n      <td>string</td>\r\n      <td>9</td>\r\n      <td>123456789</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>receiving_bank_name</td>\r\n      <td>The name of the receiving bank</td>\r\n      <td>string</td>\r\n      <td>35</td>\r\n      <td>Users Bank</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>receiving_bank_address1</td>\r\n      <td>The address of the receiving bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>2200 Break St.</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>receiving_bank_address2</td>\r\n      <td>The address of the receiving bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>#3</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>receiving_bank_address3</td>\r\n      <td>The address of the receiving bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>CA, USA</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>intermediary_bank_type</td>\r\n      <td>Routing method for ultimate destination of funds</td>\r\n      <td>String</td>\r\n      <td>5</td>\r\n      <td>ABA, SWIFT</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>intermediary_bank_routing_id</td>\r\n      <td>The SWIFT or ABA or Account number of the intermediary bank facilitating the transfer</td>\r\n      <td>String</td>\r\n      <td>11</td>\r\n      <td>123456789</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>intermediary_bank_name</td>\r\n      <td>The name of the intermediary bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>End Bank</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>intermediary_bank_address1</td>\r\n      <td>The address of the intermediary bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>2200 Break St.</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>intermediary_bank_address2</td>\r\n      <td>The address of the intermediary bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>#4</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>intermediary_bank_address3</td>\r\n      <td>The address of the intermediary bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>CA, USA</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_bank_type</td>\r\n      <td>Routing method for ultimate destination of funds</td>\r\n      <td>String</td>\r\n      <td>5</td>\r\n      <td>ABA, SWIFT</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_bank_routing_id</td>\r\n      <td>This is either the ABA routing number of the beneficiary bank or the SWIFT BIC (Bank Identifier Code) or Account Number</td>\r\n      <td>String</td>\r\n      <td>11</td>\r\n      <td>123456789</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_bank_name</td>\r\n      <td>The name of the beneficiary bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td></td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_bank_address1</td>\r\n      <td>The address of the beneficiary bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>2200 Break St.</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_bank_address2</td>\r\n      <td>The address of the beneficiary bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>#3</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_bank_address3</td>\r\n      <td>The address of the beneficiary bank</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>CA, USA</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_name</td>\r\n      <td>The name of the beneficiary</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>Receivers Bank</td>\r\n      <td>Required</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_account_number</td>\r\n      <td>The account number of the beneficiary</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td></td>\r\n      <td>Required</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_address1</td>\r\n      <td>The address of the beneficiary</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>19567 Some St.</td>\r\n      <td>Required</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_address2</td>\r\n      <td>The address of the beneficiary</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>#789</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>beneficiary_address3</td>\r\n      <td>The address of the beneficiary</td>\r\n      <td>String</td>\r\n      <td>35</td>\r\n      <td>Phoenix, AZ USA</td>\r\n      <td>Optional</td>\r\n    </tr>\r\n    <tr>\r\n      <td>originator_to_beneficiary_info</td>\r\n      <td>Comments field can be used to send reference codes</td>\r\n      <td>String</td>\r\n      <td>140</td>\r\n      <td></td>\r\n      <td>Optional</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n<h2 style=\"color: #00BCF8;\">Initiate Payment Response</h2>\r\n<table width=\"1258\">\r\n  <thead>\r\n    <tr>\r\n      <th width=\"165\">Field Name</th>\r\n      <th width=\"773\">Description</th>\r\n      <th width=\"70\">Data Type</th>\r\n      <th width=\"75\">Max Length</th>\r\n      <th width=\"175\">Sample</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>payment_id</td>\r\n      <td>Unique identifier assigned by the bank's payment system. It can be used with GET payment to query for a  specific transaction. It is required when using PUT payment to approve, cancel, or return an incoming payment. It is also added to the GET account/history request and response so that it can be used to reference the transaction in the wire system with the associated transaction when it hits the bank account.</td>\r\n      <td>string</td>\r\n      <td align=\"right\">20</td>\r\n      <td>J012345678ABCDEF</td>\r\n    </tr>\r\n    <tr>\r\n      <td>status</td>\r\n      <td>Value indicating status of the payment. Possible values include: \"Pre-Approval\",\"In-Progress\",\"Canceled\", or \"Complete\"</td>\r\n      <td>string</td>\r\n      <td align=\"right\">20</td>\r\n      <td>Pre-Approval</td>\r\n    </tr>\r\n    <tr>\r\n      <td>timestamp</td>\r\n      <td>Most recent timestamp when the status of the payment changed. This value is required along with the payment_id in order to use the PUT operation.</td>\r\n      <td>date time</td>\r\n      <td align=\"right\">23</td>\r\n      <td>YYYY-MM-DD 00:00:00.000</td>\r\n    </tr>\r\n  </tbody>\r\n</table>",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PaymentRequest" }
            },
            "text/json": {
              "schema": { "$ref": "#/components/schemas/PaymentRequest" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/PaymentRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The idempotent request was previously successfully submitted; new record not created",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              }
            }
          },
          "201": {
            "description": "Payment initiated successfully",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/payment/{payment-id}": {
      "get": {
        "tags": ["Payment"],
        "summary": "Get Payment",
        "description": "Retrieves detailed data for one payment.",
        "operationId": "GetPayment",
        "parameters": [
          {
            "name": "payment-id",
            "in": "path",
            "description": "Required. This unique identifier for payments is found in POST/PATCH/GET payment(s) responses.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment inquiry was successful",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentInfoResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentInfoResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentInfoResponse"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No content found for specified date range or query key"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      },
      "patch": {
        "tags": ["Payment"],
        "summary": "Update Payment",
        "description": "Runs an action on a payment to approve or cancel an initiated payment, or to return a completed inbound payment. Note on returns: PATCH return currently supports returning inbound FED and SWIFT payments, including FX, and some intrabank payments.",
        "operationId": "PatchPayment",
        "parameters": [
          {
            "name": "payment-id",
            "in": "path",
            "description": "Required. Used in POST/PATCH/GET payment(s) responses.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PaymentPatchRequest" }
            },
            "text/json": {
              "schema": { "$ref": "#/components/schemas/PaymentPatchRequest" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/PaymentPatchRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment update was successful",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/payment/backup/{payment-id}": {
      "patch": {
        "tags": ["Payment"],
        "summary": "Update Payment BCP",
        "description": "Updates a BCP Record with an approval so the record can be processed by the BCP Job",
        "operationId": "PatchPaymentBackup",
        "parameters": [
          {
            "name": "payment-id",
            "in": "path",
            "description": "Required. Used in POST/PATCH/GET payment(s) responses.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PaymentPatchRequest" }
            },
            "text/json": {
              "schema": { "$ref": "#/components/schemas/PaymentPatchRequest" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/PaymentPatchRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment update was successful",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/PaymentResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/payment/instructions/{trade-id}": {
      "get": {
        "tags": ["Payment"],
        "summary": "Get Payment Instructions",
        "description": "Get Payment Instructions for Trade<br /><br />For details on retrieving HATEOS links, see https://developers.made.com/reference/hateoas.",
        "operationId": "Payment Instructions",
        "parameters": [
          {
            "name": "trade-id",
            "in": "path",
            "description": "The unique id received from a successful POST/quote (marketorder) or POST/trade message.",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstructionsResponse"
                }
              },
              "application/vnd.made.paymentinstructions+json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstructionsResponse"
                }
              },
              "application/vnd.made.paymentinstructions.hateoas+json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstructionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.paymentinstructions+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.paymentinstructions.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.paymentinstructions+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/vnd.made.paymentinstructions.hateoas+json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/transfer/internal": {
      "post": {
        "tags": ["Transfer"],
        "summary": "Create Internal Transfer",
        "description": "Transfer funds between two owned made accounts.",
        "operationId": "Transfer Internal",
        "requestBody": {
          "description": "<h2 style=\"color: #2e6c80;\">Account Transfer Request Model</h2>\r\n<style>\r\n             table, td, th{\r\n                border: 1px solid black;border-collapse: collapse;\r\n            }\r\n            </style>\r\n<table width=\"1258\">\r\n  <tbody>\r\n    <tr>\r\n      <th width=\"162\">Field Name</th>\r\n      <th width=\"269\">Description</th>\r\n      <th width=\"64\">Data Type</th>\r\n      <th width=\"64\">Length</th>\r\n      <th width=\"79\">Sample</th>\r\n      <th width=\"79\">Opt/Req</th>\r\n      <th width=\"620\">Comments</th>\r\n    </tr>\r\n    <tr>\r\n      <td>SequenceNumber</td>\r\n      <td>The sequence number helps match input requests and output responses, it does not get stored in any transactional record</td>\r\n      <td>Numeric</td>\r\n      <td>8</td>\r\n      <td>1234</td>\r\n      <td>Optional</td>\r\n      <td>Used to reassemble responses, this is for your use only, does not appear in any transactional record, not recallable</td>\r\n    </tr>\r\n    <tr>\r\n      <td>AccountNumberFrom</td>\r\n      <td>The account number that money should transfer from</td>\r\n      <td>String</td>\r\n      <td>20</td>\r\n      <td>9999999999</td>\r\n      <td>Required</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>AccountNumberTo</td>\r\n      <td>The account number that money should transfer to</td>\r\n      <td>String</td>\r\n      <td>20</td>\r\n      <td>9999999999</td>\r\n      <td>Required</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>Amount</td>\r\n      <td>The amount of the transfer</td>\r\n      <td>Decimal</td>\r\n      <td>13</td>\r\n      <td>2000</td>\r\n      <td>Required</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>SerialNumber1</td>\r\n      <td>Any number you wish to apply to the transfer record</td>\r\n      <td>String</td>\r\n      <td>15</td>\r\n      <td></td>\r\n      <td>Optional</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>SerialNumber2</td>\r\n      <td>Any number you wish to apply to the transfer record</td>\r\n      <td>String</td>\r\n      <td>15</td>\r\n      <td></td>\r\n      <td>Optional</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>AccountFromDescription2-7</td>\r\n      <td>Description lines for users requesting the transfer to add to the transaction history in the account the money is transferring from</td>\r\n      <td>String</td>\r\n      <td>40</td>\r\n      <td>Transfer on behalf of</td>\r\n      <td>Optional</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>AccountToDescription2-7</td>\r\n      <td>Description lines for users requesting the transfer to add to the transaction history in the account the money is transferring to</td>\r\n      <td>String</td>\r\n      <td>40</td>\r\n      <td></td>\r\n      <td>Optional</td>\r\n      <td></td>\r\n    </tr>\r\n  </tbody>\r\n</table>",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TransferRequest" }
            },
            "text/json": {
              "schema": { "$ref": "#/components/schemas/TransferRequest" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/TransferRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Completed successfully (Note that if idempotent request repeated, will also generate 201)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TransferResponse" }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/transfer/sen": {
      "post": {
        "tags": ["Transfer"],
        "summary": "Create SEN Transfer",
        "description": "Transfer funds across The Made, LLC Exchange Network to counterparty account.",
        "operationId": "Transfer SEN",
        "requestBody": {
          "description": "<h2 style=\"color: #2e6c80;\">Account Transfer Request Model</h2>\r\n<style>\r\n            table, td, th{\r\n               border: 1px solid black;border-collapse: collapse;\r\n            }\r\n            </style>\r\n<table width=\"1258\">\r\n  <tbody>\r\n    <tr>\r\n      <th width=\"162\">Field Name</th>\r\n      <th width=\"269\">Description</th>\r\n      <th width=\"64\">Data Type</th>\r\n      <th width=\"64\">Length</th>\r\n      <th width=\"79\">Sample</th>\r\n      <th width=\"79\">Opt/Req</th>\r\n      <th width=\"620\">Comments</th>\r\n    </tr>\r\n    <tr>\r\n      <td>SequenceNumber</td>\r\n      <td>The sequence number helps match input requests and output responses, it does not get stored in any transactional record</td>\r\n      <td>Numeric</td>\r\n      <td>8</td>\r\n      <td>1234</td>\r\n      <td>Optional</td>\r\n      <td>Used to reassemble responses, this is for your use only, does not appear in any transactional record, not recallable</td>\r\n    </tr>\r\n    <tr>\r\n      <td>AccountNumberFrom</td>\r\n      <td>The account number that money should transfer from</td>\r\n      <td>String</td>\r\n      <td>20</td>\r\n      <td>9999999999</td>\r\n      <td>Required</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>AccountNumberTo</td>\r\n      <td>The account number that money should transfer to</td>\r\n      <td>String</td>\r\n      <td>20</td>\r\n      <td>9999999999</td>\r\n      <td>Required</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>Amount</td>\r\n      <td>The amount of the transfer</td>\r\n      <td>Decimal</td>\r\n      <td>13</td>\r\n      <td>2000</td>\r\n      <td>Required</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>SerialNumber1</td>\r\n      <td>Any number you wish to apply to the transfer record</td>\r\n      <td>String</td>\r\n      <td>15</td>\r\n      <td></td>\r\n      <td>Optional</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>SerialNumber2</td>\r\n      <td>Any number you wish to apply to the transfer record</td>\r\n      <td>String</td>\r\n      <td>15</td>\r\n      <td></td>\r\n      <td>Optional</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>AccountFromDescription2-7</td>\r\n      <td>Description lines for users requesting the transfer to add to the transaction history in the account the money is transferring from</td>\r\n      <td>String</td>\r\n      <td>40</td>\r\n      <td>Transfer on behalf of</td>\r\n      <td>Optional</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>AccountToDescription2-7</td>\r\n      <td>Description lines for users requesting the transfer to add to the transaction history in the account the money is transferring to</td>\r\n      <td>String</td>\r\n      <td>40</td>\r\n      <td></td>\r\n      <td>Optional</td>\r\n      <td></td>\r\n    </tr>\r\n  </tbody>\r\n</table>",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TransferRequest" }
            },
            "text/json": {
              "schema": { "$ref": "#/components/schemas/TransferRequest" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/TransferRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Completed successfully (Note that if idempotent request repeated, will also generate 201)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TransferResponse" }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request data",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "The caller was not authorized to the request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/webhook": {
      "get": {
        "tags": ["WebHook"],
        "summary": "Get Webhooks",
        "description": "Returns details for all webhooks for a subscription, with filtering by account_number",
        "parameters": [
          {
            "name": "account-number",
            "in": "query",
            "description": "Optional. The associated made account number of the intended webhook(s).",
            "schema": { "type": "string", "default": "" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/WebHookListResponse" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WebHookListResponse" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/WebHookListResponse" }
              }
            }
          },
          "204": {
            "description": "No Content (Success, no webhooks registered)"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      },
      "post": {
        "tags": ["WebHook"],
        "summary": "Create Webhook",
        "description": "Creates a new webhook that sends notifications via HTTP POST and/or email when a balance on a given account changes",
        "requestBody": {
          "description": "<h2 style=\"color: #2e6c80;\">Register WebHook Model</h2>\r\n<style>\r\n             table, td, th{\r\n                border: 1px solid black;border-collapse: collapse;\r\n             }\r\n             </style>\r\n<table width=\"1258\">\r\n  <tbody>\r\n    <tr>\r\n      <th width=\"162\">Field Name</th>\r\n      <th width=\"269\">Description</th>\r\n      <th width=\"64\">Data Type</th>\r\n      <th width=\"64\">Length</th>\r\n      <th width=\"79\">Sample</th>\r\n      <th width=\"79\">Opt/Req</th>\r\n      <th width=\"620\">Comments</th>\r\n    </tr>\r\n    <tr>\r\n      <td>AccountNumber</td>\r\n      <td>The account in which you wish to receive balance updates</td>\r\n      <td>Numeric</td>\r\n      <td>20</td>\r\n      <td>9999999999</td>\r\n      <td>Required</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>Description</td>\r\n      <td>A description of the web hook you can use for internal purposes</td>\r\n      <td>String</td>\r\n      <td></td>\r\n      <td></td>\r\n      <td>Optional</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>WebHookUrl</td>\r\n      <td>This is your post back address where you would like to receive notification when the account balance changes</td>\r\n      <td>string - URI</td>\r\n      <td></td>\r\n      <td>http://www.made.com/webhooks</td>\r\n      <td>Required if Emails are not provided</td>\r\n      <td>This must be a well formed and valid URL. Body of post back will similar to the following:\r\n                 <br />{<br />\r\n                     \"AccountNumber\" : \"1000109015\",<br />\r\n                     \"AvailableBalance\" : \"000010000\",<br />\r\n                     \"PreviousBalance\" :  \"000010100\"<br />\r\n                 }<br />\r\n                 Postback will also include the following Headers that can be used to validate that it was signed by made Bank<br />\r\n                 X-made-Timestamp - This is a DateTime created during the postback and used as part of the data used to create a the signature.  This will be needed to recreate the signature and Hash to validate this postback.<br />\r\n                 X-made-Signature - This is a base64 string representation of an SHA256 object using the given secret, then create a hash of the text combination of the\r\n                 date and the data as a json string in the format of \"{date from timestamp header}.{json postback data}\r\n             </td>\r\n    </tr>\r\n    <tr>\r\n      <td>Emails</td>\r\n      <td>This is a comma separated list of emails that will be notified when a balance changes</td>\r\n      <td>String</td>\r\n      <td></td>\r\n      <td>jondoe@made.com,someuser@made.com</td>\r\n      <td>Required if WebHookUrl is not provided</td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>Secret</td>\r\n      <td>The secret used to sign the response</td>\r\n      <td>string</td>\r\n      <td></td>\r\n      <td>+17706665555,+16125551111</td>\r\n      <td>Required</td>\r\n      <td></td>\r\n    </tr>\r\n  </tbody>\r\n</table>",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/WebHookRequest" }
            },
            "text/json": {
              "schema": { "$ref": "#/components/schemas/WebHookRequest" }
            },
            "application/*+json": {
              "schema": { "$ref": "#/components/schemas/WebHookRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Webhook successfully created",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/WebHookResponse" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WebHookResponse" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/WebHookResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    },
    "/api/webhook/{web-hook-id}": {
      "get": {
        "tags": ["WebHook"],
        "summary": "Get Webhook",
        "description": "Returns details for webhook by web-hook-id",
        "parameters": [
          {
            "name": "web-hook-id",
            "in": "path",
            "description": "Sending a web-hook-id will respond with only that webhook and its details. Not if neither account-number nor web-hook-id are sent, all webhooks associated with subscription will be returned.",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/WebHookResponse" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WebHookResponse" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/WebHookResponse" }
              }
            }
          },
          "204": {
            "description": "No Content (Success, no webhook registered under that ID)"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": { "schema": { "type": "string" } },
              "application/json": { "schema": { "type": "string" } },
              "text/json": { "schema": { "type": "string" } }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      },
      "delete": {
        "tags": ["WebHook"],
        "summary": "Delete Webhook",
        "description": "Delete a previously registered webhook",
        "parameters": [
          {
            "name": "web-hook-id",
            "in": "path",
            "description": "Required. The id of the targeted webhook, returned from the registration process or available via GET webhook.",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "204": { "description": "No Content (Success)" },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              },
              "text/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": { "description": "Server Error" },
          "503": {
            "description": "There is an internal issue with the service"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BalanceResponse": {
        "type": "object",
        "properties": {
          "account_number": {
            "type": "string",
            "description": "The account number passed in the request",
            "nullable": true
          },
          "short_name": {
            "type": "string",
            "description": "The short name associated to the account, set in made core system",
            "nullable": true
          },
          "available_balance": {
            "type": "number",
            "description": "The current available amount in the queried account",
            "format": "double",
            "nullable": true
          },
          "current_balance": {
            "type": "number",
            "description": "From bank ledger perspective, current balance is the closing balance from the prior banking day",
            "format": "double",
            "nullable": true
          },
          "holds_balance": {
            "type": "number",
            "description": "The total amount currently on hold for the queried account",
            "format": "double"
          },
          "account_opened_date": {
            "type": "string",
            "description": "The date on which the account was opened",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "The current account status, typically \"open\"",
            "nullable": true
          },
          "last_statement_balance": {
            "type": "number",
            "description": "The balance as of the most recent statement",
            "format": "double"
          },
          "last_statement_date": {
            "type": "string",
            "description": "The date of the most recent statement",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Error": { "type": "string" },
      "LoanBalanceResponse": {
        "type": "object",
        "properties": {
          "account_number": {
            "type": "string",
            "description": "The loan number passed in the request",
            "nullable": true
          },
          "available_balance": {
            "type": "number",
            "description": "The current available amount in the queried loan",
            "nullable": true
          },
          "line_limit": {
            "type": "number",
            "description": "The line limit of the queried loan",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CashManagerBalanceResponse": {
        "type": "object",
        "properties": {
          "account_number": {
            "type": "string",
            "description": "The account number passed in the request",
            "nullable": true
          },
          "available_balance": {
            "type": "number",
            "description": "The current available amount in the queried account",
            "nullable": true
          },
          "opened_date": {
            "type": "string",
            "description": "The date on which the account was opened",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "HistoryResponse": {
        "type": "object",
        "properties": {
          "more_data": {
            "type": "boolean",
            "description": "Identifies when there may be additional records that match request range beyond what is currently displayed. Defaults to true, unless requested page size was greater than number of remaining records."
          },
          "count": {
            "type": "integer",
            "description": "Number of records returned",
            "format": "int32",
            "readOnly": true
          },
          "records": {
            "type": "array",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/HistoryRecord" }
          }
        },
        "additionalProperties": false
      },
      "CustomerAccountList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of records returned from the request",
            "format": "int32",
            "readOnly": true
          },
          "records": {
            "type": "array",
            "description": "Array of Accounts",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/CustomerAccount" }
          }
        },
        "additionalProperties": false,
        "description": "Customer Account List Response"
      },
      "ConnectionsResponse": {
        "type": "object",
        "properties": {
          "third_party_contacts_count": {
            "type": "integer",
            "description": "The number of records (contact_ids) returned from the request",
            "format": "int32",
            "readOnly": true
          },
          "third_party_contacts": {
            "type": "array",
            "description": "Array of contact_ids, and their account_ids, associated with the subscription; filtered by trade-id or currency if either parameter is passed",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/ContactResponse" }
          },
          "owned_accounts_count": {
            "type": "integer",
            "description": "The number of records (owned account_ids) returned from the request",
            "format": "int32",
            "readOnly": true
          },
          "owned_accounts": {
            "type": "array",
            "description": "Array of owned account_ids associated with the subscription, filtered by trade-id or currency if either parameter is passed",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OwnedExternalAccountResponse"
            }
          }
        },
        "additionalProperties": false,
        "description": "Connections Response"
      },
      "ContactsListResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of records (contact_ids) returned from the request",
            "format": "int32",
            "readOnly": true
          },
          "records": {
            "type": "array",
            "description": "Array of contact_ids, and their account_ids, associated with the subscription; filtered by trade-id or currency if either parameter is passed",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/ContactResponse" }
          }
        },
        "additionalProperties": false,
        "description": "Contacts List Response"
      },
      "OwnedExternalAccountsListResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of records (owned account_ids) returned from the request",
            "format": "int32",
            "readOnly": true
          },
          "records": {
            "type": "array",
            "description": "Array of owned account_ids associated with the subscription, filtered by trade-id or currency if either parameter is passed",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OwnedExternalAccountResponse"
            }
          }
        },
        "additionalProperties": false,
        "description": "Owned External Accounts List Response"
      },
      "QuoteRequest": {
        "type": "object",
        "properties": {
          "account_number": {
            "type": "string",
            "description": "Required. The Made, LLC account number associated to the quote and potential trade.",
            "nullable": false
          },
          "external_account_type": {
            "type": "integer",
            "description": "Required. The general identification of the end beneficiary/trade purpose; enter 1 for Owned, 2 for ThirdParty, 3 for ThirdPartyCrypto",
            "format": "int32",
            "nullable": false
          },
          "currency_pair": {
            "type": "string",
            "description": "Required. The ISO codes of the currencies.",
            "nullable": false
          },
          "is_buy": {
            "type": "boolean",
            "description": "Required. Indicates the direction of quote or trade; true = buying the first currency in the pair; false = not buying the first currency in the pair.",
            "nullable": false
          },
          "dealt_amount": {
            "type": "number",
            "description": "Required unless a counter_amount is sent. Specify the amount you want to exchange; the dealt currency is the first currency listed in the currency pair. If dealt_amount is provided, then counter_ amount will be calculated based on exchange rate. You cannot send both. You many send up to 3 characters right of the decimal.",
            "nullable": false
          },
          "counter_amount": {
            "type": "number",
            "description": "Required unless a dealt_amount is sent. Specify the amount you want to exchange; the counter currency is the second currency listed in the currency pair. If counter_amount is provided, then dealt_ amount will be calculated based on exchange rate. You cannot send both. You may send up to 3 characters right of the decimal.",
            "nullable": false
          }
        },
        "additionalProperties": false,
        "description": "FX Quote Request"
      },
      "QuoteResponse": {
        "type": "object",
        "properties": {
          "quote_id": {
            "type": "string",
            "description": "The unique quote id associated with a successful request, which (if not indicative) is used in the POST trade Request",
            "nullable": true
          },
          "quote_expiration": {
            "type": "string",
            "description": "The timestamp (UTC) indicating when the quote will expire",
            "format": "date-time",
            "nullable": true
          },
          "is_indicative": {
            "type": "boolean",
            "description": "If true, the quote is informative only and cannot be used to POST a trade."
          },
          "indicative_reason": {
            "type": "string",
            "description": "If is_indicative = true, a reason will be provided here",
            "nullable": true
          },
          "account_number": {
            "type": "string",
            "description": "The Made, LLC account number from which the quoted funds will be drawn or to which funds will be deposited, if a trade is executed",
            "nullable": true
          },
          "external_account_type": {
            "type": "string",
            "description": "The type of the end beneficiary/trade purpose, possible values: Owned, ThirdParty, or ThirdPartyCrypto",
            "nullable": true
          },
          "currency_pair": {
            "type": "string",
            "description": "The ISO codes of the two currencies",
            "nullable": true
          },
          "is_buy": {
            "type": "boolean",
            "description": "Indicates the direction of quote or trade; true = buying the first currency in the pair; false = not buying the first currency in the pair"
          },
          "dealt_amount": {
            "type": "number",
            "description": "The amount of the dealt currency to be exchanged. The dealt currency is the first currency listed in the currency pair.",
            "format": "double"
          },
          "counter_amount": {
            "type": "number",
            "description": "Amount of the counter currency to be exchanged. The counter currency is the second currency listed in the currency pair.",
            "format": "double"
          },
          "value_date": {
            "type": "string",
            "description": "Date on which funds are expected to be transferred to the beneficiary. There is no time component of the value_date.",
            "format": "date-time"
          },
          "dealt_rate": {
            "type": "number",
            "description": "Exchange rate at which 1 dealt currency unit will be exchanged for the counter currency",
            "format": "double"
          },
          "counter_rate": {
            "type": "number",
            "description": "Exchange rate at which 1 counter currency unit will be exchanged for the dealt currency",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "FX Quote Response"
      },
      "MarketOrderResponse": {
        "type": "object",
        "properties": {
          "trade_id": {
            "type": "string",
            "description": "A unique trade id associated with the request, which (if applicable) can be used at the POST FX payment endpoint",
            "nullable": true
          },
          "account_number": {
            "type": "string",
            "description": "The Made, LLC account number from which the quoted funds will be drawn or to which funds will be deposited, if a trade is executed",
            "nullable": true
          },
          "external_account_type": {
            "type": "string",
            "description": "The type of the end beneficiary/trade purpose, possible values: Owned, ThirdParty, or ThirdPartyCrypto",
            "nullable": true
          },
          "currency_pair": {
            "type": "string",
            "description": "The ISO codes of the two currencies",
            "nullable": true
          },
          "is_buy": {
            "type": "boolean",
            "description": "Indicates the direction of quote or trade; true = buying the first currency in the pair; false = not buying the first currency in the pair"
          },
          "dealt_amount": {
            "type": "number",
            "description": "The amount of the dealt currency to be exchanged. The dealt currency is the first currency listed in the currency pair.",
            "format": "double"
          },
          "counter_amount": {
            "type": "number",
            "description": "Amount of the counter currency to be exchanged. The counter currency is the second currency listed in the currency pair.",
            "format": "double"
          },
          "value_date": {
            "type": "string",
            "description": "Date on which funds are expected to be transferred to the beneficiary. There is no time component of the value_date.",
            "format": "date-time"
          },
          "dealt_rate": {
            "type": "number",
            "description": "Exchange rate at which 1 dealt currency unit will be exchanged for the counter currency",
            "format": "double"
          },
          "counter_rate": {
            "type": "number",
            "description": "Exchange rate at which 1 counter currency unit will be exchanged for the dealt currency",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "FX Market Order Response"
      },
      "InternalQuoteRequest": {
        "type": "object",
        "properties": {
          "debit_account_number": {
            "type": "string",
            "description": "Required. The Made, LLC debit account number.",
            "nullable": false
          },
          "credit_account_number": {
            "type": "string",
            "description": "Required. The Made, LLC credit account number.",
            "nullable": false
          },
          "currency_pair": {
            "type": "string",
            "description": "Required. The ISO codes of the currencies.",
            "nullable": false
          },
          "debit_amount": {
            "type": "number",
            "description": "Required unless a credit_amount is sent. Specify the amount you want to exchange; the debit_amount refers to the amount for the debit account. If debit_amount is provided, then credit_amount will be calculated based on exchange rate. You cannot send both. You many send up to 3 characters right of the decimal.",
            "nullable": false
          },
          "credit_amount": {
            "type": "number",
            "description": "Required unless a debit_amount is sent. Specify the amount you want to exchange; the credit_amount refers to the amount for the credit account. If credit_amount is provided, then debit_amount will be calculated based on exchange rate. You cannot send both. You may send up to 3 characters right of the decimal.",
            "nullable": false
          }
        },
        "additionalProperties": false,
        "description": "FX Internal Quote Request"
      },
      "InternalQuoteResponse": {
        "type": "object",
        "properties": {
          "quote_id": {
            "type": "string",
            "description": "The unique quote id associated with a successful request, which (if not indicative) is used in the POST trade Request",
            "nullable": false
          },
          "quote_expiration": {
            "type": "string",
            "description": "The timestamp (UTC) indicating when the quote will expire",
            "format": "date-time",
            "nullable": true
          },
          "is_indicative": {
            "type": "boolean",
            "description": "If true, the quote is informative only and cannot be used to POST a trade."
          },
          "indicative_reason": {
            "type": "string",
            "description": "If is_indicative = true, a reason will be provided here",
            "nullable": true
          },
          "debit_account_number": {
            "type": "string",
            "description": "The debit account number.",
            "nullable": false
          },
          "credit_account_number": {
            "type": "string",
            "description": "The credit account number.",
            "nullable": false
          },
          "currency_pair": {
            "type": "string",
            "description": "The ISO codes of the two currencies",
            "nullable": true
          },
          "debit_amount": {
            "type": "number",
            "description": "The debit amount to be exchanged.",
            "format": "double"
          },
          "credit_amount": {
            "type": "number",
            "description": "The credit amount to be exchanged.",
            "format": "double"
          },
          "value_date": {
            "type": "string",
            "description": "Date on which funds are expected to be transferred to the beneficiary. There is no time component of the value_date.",
            "format": "date-time"
          },
          "dealt_rate": {
            "type": "number",
            "description": "Exchange rate at which 1 dealt currency unit will be exchanged for the counter currency",
            "format": "double"
          },
          "counter_rate": {
            "type": "number",
            "description": "Exchange rate at which 1 counter currency unit will be exchanged for the dealt currency",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "FX Internal Quote Response"
      },
      "InternalMarketOrderResponse": {
        "type": "object",
        "properties": {
          "trade_id": {
            "type": "string",
            "description": "A unique trade id associated with the request.",
            "nullable": true
          },
          "payment_id": {
            "type": "string",
            "description": "A unique payment id associated with the request.",
            "nullable": false
          },
          "debit_account_number": {
            "type": "string",
            "description": "The debit account number.",
            "nullable": false
          },
          "credit_account_number": {
            "type": "string",
            "description": "The credit account number.",
            "nullable": false
          },
          "currency_pair": {
            "type": "string",
            "description": "The ISO codes of the two currencies",
            "nullable": true
          },
          "debit_amount": {
            "type": "number",
            "description": "The debit amount to be exchanged.",
            "format": "double"
          },
          "credit_amount": {
            "type": "number",
            "description": "The credit amount to be exchanged.",
            "format": "double"
          },
          "value_date": {
            "type": "string",
            "description": "Date on which funds are expected to be transferred to the beneficiary. There is no time component of the value_date.",
            "format": "date-time"
          },
          "dealt_rate": {
            "type": "number",
            "description": "Exchange rate at which 1 dealt currency unit will be exchanged for the counter currency",
            "format": "double"
          },
          "counter_rate": {
            "type": "number",
            "description": "Exchange rate at which 1 counter currency unit will be exchanged for the dealt currency",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "FX Internal Market Order Response"
      },
      "TradeListResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of records returned from the request",
            "format": "int32",
            "readOnly": true
          },
          "records": {
            "type": "array",
            "description": "Array of Trades",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/TradeResponse" }
          }
        },
        "additionalProperties": false,
        "description": "FX Trade List Response"
      },
      "TradeExecutionRequest": {
        "type": "object",
        "properties": {
          "quote_id": {
            "type": "integer",
            "description": "Required. A unique quote id received from a successful POST quote response.",
            "format": "int32",
            "nullable": false
          }
        },
        "additionalProperties": false,
        "description": "FX Trade Execution Request"
      },
      "TradeExecutionResponse": {
        "type": "object",
        "properties": {
          "trade_id": {
            "type": "integer",
            "description": "A unique trade id associated with the request, which (if applicable) can be used at the POST FX payment endpoint",
            "nullable": true
          },
          "account_number": {
            "type": "string",
            "description": "made account number from which the quoted funds will be drawn or to which funds will be deposited",
            "nullable": true
          },
          "external_account_type": {
            "type": "string",
            "description": "General identification of the end beneficiary/trade purpose; possible values: Owned, ThirdParty, ThirdPartyCrypto",
            "nullable": true
          },
          "currency_pair": {
            "type": "string",
            "description": "The ISO codes of the two different currencies",
            "nullable": true
          },
          "is_buy": {
            "type": "string",
            "description": "Indicates the direction of quote or trade; true = buying the first currency in the pair; false = not buying the first currency in the pair"
          },
          "dealt_amount": {
            "type": "number",
            "description": "Amount of the dealt currency to be exchanged, may be slightly adjusted from requested amount, based on conversion math",
            "format": "double"
          },
          "counter_amount": {
            "type": "number",
            "description": "Amount of the counter currency to be exchanged, may be slightly adjusted from requested amount, based on conversion math",
            "format": "double"
          },
          "value_date": {
            "type": "string",
            "description": "Date on which funds are expected to be transferred to the beneficiary. There is no time component of the value_date.",
            "format": "date-time"
          },
          "dealt_rate": {
            "type": "number",
            "description": "Exchange rate at which 1 dealt currency unit will be exchanged for the counter currency",
            "format": "double"
          },
          "counter_rate": {
            "type": "number",
            "description": "Exchange rate at which 1 counter currency unit will be exchanged for the dealt currency",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "FX Trade Execution Response"
      },
      "InternalTradeExecutionRequest": {
        "type": "object",
        "properties": {
          "quote_id": {
            "type": "integer",
            "description": "Required. A unique quote id received from a successful POST internal quote response.",
            "format": "int32",
            "nullable": false
          }
        },
        "additionalProperties": false,
        "description": "FX Internal Trade Execution Request"
      },
      "InternalTradeExecutionResponse": {
        "type": "object",
        "properties": {
          "trade_id": {
            "type": "string",
            "description": "A unique trade id associated with the request.",
            "nullable": true
          },
          "payment_id": {
            "type": "string",
            "description": "A unique payment id associated with the request.",
            "nullable": false
          },
          "debit_account_number": {
            "type": "string",
            "description": "The debit account number.",
            "nullable": false
          },
          "credit_account_number": {
            "type": "string",
            "description": "The credit account number.",
            "nullable": false
          },
          "currency_pair": {
            "type": "string",
            "description": "The ISO codes of the two currencies",
            "nullable": true
          },
          "debit_amount": {
            "type": "number",
            "description": "The debit amount to be exchanged.",
            "format": "double"
          },
          "credit_amount": {
            "type": "number",
            "description": "The credit amount to be exchanged.",
            "format": "double"
          },
          "value_date": {
            "type": "string",
            "description": "Date on which funds are expected to be transferred to the beneficiary. There is no time component of the value_date.",
            "format": "date-time"
          },
          "dealt_rate": {
            "type": "number",
            "description": "Exchange rate at which 1 dealt currency unit will be exchanged for the counter currency",
            "format": "double"
          },
          "counter_rate": {
            "type": "number",
            "description": "Exchange rate at which 1 counter currency unit will be exchanged for the dealt currency",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "FX Internal Trade Execution Response"
      },
      "TradeResponse": {
        "type": "object",
        "properties": {
          "account_number": {
            "type": "string",
            "description": "The Made, LLC account number from which the traded funds will be drawn or to which the traded funds will be deposited. For internal trades, this is the debit account.",
            "nullable": true
          },
          "external_account_type": {
            "type": "string",
            "description": "The general identification of the end beneficiary/trade purpose; possible values: Owned, ThirdParty, ThirdPartyCrypto, Internal",
            "nullable": true
          },
          "trade_id": {
            "type": "string",
            "description": "A unique trade id associated with the request, which (if applicable) can be used at the POST FX payment endpoint",
            "nullable": true
          },
          "trade_date": {
            "type": "string",
            "description": "Date on which the trade was executed, with Pacific Time timestamp",
            "format": "date-time"
          },
          "currency_pair": {
            "type": "string",
            "description": "The ISO codes of the currencies exchanged in trade",
            "nullable": true
          },
          "is_buy": {
            "type": "string",
            "description": "Indicates the direction of the trade; true = buying the first currency in the pair; false = not buying the first currency in the pair"
          },
          "dealt_amount": {
            "type": "number",
            "description": "Amount of the dealt currency exchanged",
            "format": "double"
          },
          "counter_amount": {
            "type": "number",
            "description": "Amount of the counter currency exchanged",
            "format": "double"
          },
          "quote_id": {
            "type": "string",
            "description": "The unique id provided when quote was first initiated",
            "nullable": true
          },
          "value_date": {
            "type": "string",
            "description": "Date on which funds are expected to be transferred to the beneficiary. There is no time component of the value_date.",
            "format": "date-time"
          },
          "dealt_rate": {
            "type": "number",
            "description": "Exchange rate at which 1 dealt currency unit will be exchanged for the counter currency",
            "format": "double"
          },
          "counter_rate": {
            "type": "number",
            "description": "Exchange rate at which 1 counter currency unit will be exchanged for the dealt currency",
            "format": "double"
          },
          "source": {
            "type": "integer",
            "description": "Indicates the channel where the trade was executed (\"Partner Api\" or \"Portal\")",
            "nullable": true
          },
          "trade_status": {
            "type": "integer",
            "description": "Status of the trade; \"Processing\", \"Executed\", or \"Cancelled\"",
            "nullable": true
          },
          "payment_pending_beneficiary": {
            "type": "boolean",
            "description": "Status of the trade's payment beneficiary details (if pending_beneficiary = True, the trade requires beneficiary details and payment submission)"
          },
          "payment_id": {
            "type": "string",
            "description": "Payment id associated with the trade. Empty if payment_pending_beneficiary is true.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "FX Trade Response"
      },
      "FxPaymentRequest": {
        "type": "object",
        "properties": {
          "trade_id": {
            "type": "string",
            "description": "Required. Unique Id received upon successful GET Quote (Market Trade request) or POST FX Trade message via the API.",
            "nullable": true
          },
          "memo": {
            "type": "string",
            "description": "Optional. Max length 140. Comments field can be used to send reference codes.",
            "nullable": true
          },
          "purpose_of_payment": {
            "$ref": "#/components/schemas/PurposesOfPayment"
          },
          "external_account_id": {
            "type": "string",
            "description": "Required. Account unique identifier for non-ad-hoc payments, which are retrieved from GET connections\nIf Content-Type header is application/vnd.made.fxpaymentrequest+json, an external_account_id must be passed and if trade's external_account_type = 1 (\"owned\"), the external_account_id must be owned. \nWhen this field is used, the remaining request fields cannot be passed.\n",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "PaymentResponse": {
        "type": "object",
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "Unique identifier assigned to each payment message by the bank's payment system. The payment_id can be used with GET payment to query for this transaction. payment_id is also passed in applicable records in GET history response body. The payment_id of a message will never change; however, a PATCH operation with action 'return' creates a new outbound message with a new unique payment_id.",
            "nullable": false
          },
          "payment_status": {
            "type": "string",
            "description": "Value indicating current payment state. Possible values include, \"pre-approval\", \"in-progress\", \"cancelled\", \"complete\", and \"canceled\". \nDuring the same business day, a new payment is in \"pre-approval\" until PATCH payment is used to approve (moving to \"in-progress\") or cancel.\n",
            "nullable": false
          },
          "payment_timestamp": {
            "type": "string",
            "description": "Most recent timestamp (UTC) when the status of the payment changed.",
            "format": "date-time",
            "nullable": false
          }
        },
        "additionalProperties": false,
        "description": "Payment Response"
      },
      "FxAdhocPaymentRequest": {
        "type": "object",
        "properties": {
          "trade_id": {
            "type": "string",
            "description": "Required. Unique Id received upon successful GET Quote (Market Trade request) or POST FX Trade message via the API.",
            "nullable": false
          },
          "sending_currency": {
            "type": "string",
            "description": "Required. ISO code of the currency of the wire payment and the currency the beneficiary will receive (e.g. \"USD\" or \"EUR\").",
            "nullable": false
          },
          "memo": {
            "type": "string",
            "description": "Optional. Max length 140. Comments field can be used to send reference codes.",
            "nullable": true
          },
          "purpose_of_payment": {
            "$ref": "#/components/schemas/PurposesOfPayment"
          },
          "beneficiary_bank_name": {
            "type": "string",
            "description": "Required. Max length 35. Name of the beneficiary bank, needed only for ad hoc payments.",
            "nullable": false
          },
          "beneficiary_bank_type": {
            "type": "string",
            "description": "Required. Routing method for ultimate destination of funds (\"ABA\" or \"SWIFT\"), needed only for ad hoc payments.",
            "nullable": false
          },
          "beneficiary_bank_routing_id": {
            "type": "string",
            "description": "Required. This is either the ABA routing number of the beneficiary bank or its SWIFT BIC (Bank Identifier Code), needed only for ad hoc payments.",
            "nullable": false
          },
          "beneficiary_bank_account_number": {
            "type": "string",
            "description": "Required. Account number of the beneficiary, needed only for ad hoc payments.",
            "nullable": false
          },
          "beneficiary_bank_account_is_iban": {
            "type": "boolean",
            "description": "Required. If true, the beneficiary bank account number is an International Bank Account Number (IBAN) formatted account number; otherwise, false. Needed only for ad hoc payments.",
            "nullable": false
          },
          "beneficiary_bank_street_address": {
            "type": "string",
            "description": "Required. Max length 35. Street address of the beneficiary bank, needed only for ad hoc payments.",
            "nullable": false
          },
          "beneficiary_bank_city": {
            "type": "string",
            "description": "Optional. Max length 35. City of the beneficiary bank, needed only for ad hoc payments.",
            "nullable": true
          },
          "beneficiary_bank_region": {
            "type": "string",
            "description": "Optional. Max length 35. Region of the beneficiary bank, needed only for ad hoc payments.",
            "nullable": true
          },
          "beneficiary_bank_postal": {
            "type": "string",
            "description": "Optional. Postal code of the beneficiary bank, needed only for ad hoc payments.",
            "nullable": true
          },
          "beneficiary_bank_country_code": {
            "type": "string",
            "description": "Required. The 2 or 3 digit ISO code of the country of the beneficiary bank, needed only for ad hoc payments.",
            "nullable": false
          },
          "beneficiary_bank_sort_code": {
            "type": "string",
            "description": "Optional. Unique bank branch identifier required by Australian banks and optional for Canadian banks.",
            "nullable": true
          },
          "beneficiary_bank_cnaps": {
            "type": "string",
            "description": "Optional. China National Advanced Payment System.  Unique bank branch identifier for beneficiary banks located in China.",
            "nullable": true
          },
          "beneficiary_bank_ifsc": {
            "type": "string",
            "description": "Optional. Indian Financial System Code.  Unique bank branch identifier for beneficiary banks located in India.",
            "nullable": true
          },
          "beneficiary_name": {
            "type": "string",
            "description": "Required. Max length 35. Name of the beneficiary, needed only for ad hoc payments.",
            "nullable": false
          },
          "beneficiary_street_address": {
            "type": "string",
            "description": "Required. Max length 35. Address of the beneficiary, needed only for ad hoc payments.",
            "nullable": false
          },
          "beneficiary_city": {
            "type": "string",
            "description": "Optional. Max length 35. City of the beneficiary, needed only for ad hoc payments.",
            "nullable": true
          },
          "beneficiary_region": {
            "type": "string",
            "description": "Optional. Max length 35. Region of the beneficiary, needed only for ad hoc payments.",
            "nullable": true
          },
          "beneficiary_postal": {
            "type": "string",
            "description": "Optional. Postal code of the beneficiary, needed only for ad hoc payments.",
            "nullable": true
          },
          "beneficiary_country_code": {
            "type": "string",
            "description": "Required. The 2 or 3 digit ISO code of the country of the beneficiary, needed only for ad hoc payments.",
            "nullable": false
          },
          "intermediary_bank_street_address": {
            "type": "string",
            "description": "Optional. Max length 35. Street address of the intermediary bank",
            "nullable": true
          },
          "intermediary_bank_city": {
            "type": "string",
            "description": "Optional. Max length 35. City of the intermediary bank",
            "nullable": true
          },
          "intermediary_bank_region": {
            "type": "string",
            "description": "Optional. Max length 35. Region of the intermediary bank",
            "nullable": true
          },
          "intermediary_bank_postal": {
            "type": "string",
            "description": "Optional. Postal code of the intermediary bank",
            "nullable": true
          },
          "intermediary_bank_country_code": {
            "type": "string",
            "description": "Optional. The 2 or 3 digit code of the country of the intermediary bank",
            "nullable": true
          },
          "intermediary_bank_name": {
            "type": "string",
            "description": "Optional. Max length 35. Name of the intermediary bank",
            "nullable": true
          },
          "intermediary_bank_routing_id": {
            "type": "string",
            "description": "Optional. The SWIFT or ABA or Account number of the intermediary bank facilitating the transfer",
            "nullable": true
          },
          "intermediary_bank_type": {
            "type": "string",
            "description": "Optional. Routing method for intermediary bank facilitating transfer to beneficiary bank",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentInfoListResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of records returned from the request",
            "format": "int32",
            "readOnly": true
          },
          "records": {
            "type": "array",
            "description": "Array of payments",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/PaymentInfoResponse" }
          }
        },
        "additionalProperties": false,
        "description": "Payments List Response"
      },
      "PaymentRequest": {
        "type": "object",
        "properties": {
          "beneficiary_street_address": {
            "type": "string",
            "description": "Required. Max length 35. The street address of the beneficiary.",
            "nullable": false
          },
          "beneficiary_city": {
            "type": "string",
            "description": "Optional. Max length 35. The city of the beneficiary.",
            "nullable": true
          },
          "beneficiary_region": {
            "type": "string",
            "description": "Optional. Max length 35. The region of the beneficiary (e.g. state, province, or territory).",
            "nullable": true
          },
          "beneficiary_postal": {
            "type": "string",
            "description": "Optional. The postal code of the beneficiary.",
            "nullable": true
          },
          "beneficiary_country_code": {
            "type": "string",
            "description": "Required. The 2 or 3 digit ISO code of the country of the beneficiary.",
            "nullable": false
          },
          "beneficiary_name": {
            "type": "string",
            "description": "Required. Max length 35. The name of the payment beneficiary.",
            "nullable": false
          },
          "beneficiary_bank_street_address": {
            "type": "string",
            "description": "Required. Max length 35. Street address of the beneficiary bank.",
            "nullable": false
          },
          "beneficiary_bank_city": {
            "type": "string",
            "description": "Optional. Max length 35. City of the beneficiary bank.",
            "nullable": true
          },
          "beneficiary_bank_region": {
            "type": "string",
            "description": "Optional. Max length 35. Region of the beneficiary bank.",
            "nullable": true
          },
          "beneficiary_bank_postal": {
            "type": "string",
            "description": "Optional. Postal code of the beneficiary bank.",
            "nullable": true
          },
          "beneficiary_bank_country_code": {
            "type": "string",
            "description": "Optional. The 2 or 3 digit ISO code of the country of the beneficiary bank.",
            "nullable": true
          },
          "beneficiary_bank_name": {
            "type": "string",
            "description": "Required. Max length 35. Name of the beneficiary bank.",
            "nullable": false
          },
          "beneficiary_bank_account_number": {
            "type": "string",
            "description": "Required. Account number of the beneficiary.",
            "nullable": false
          },
          "beneficiary_bank_routing_id": {
            "type": "string",
            "description": "Required. The SWIFT or ABA or Account number of the beneficiary bank facilitating the transfer.",
            "nullable": false
          },
          "beneficiary_bank_type": {
            "type": "string",
            "description": "Required. The routing method for ultimate destination of funds (\"ABA\", \"SWIFT\" or \"ACCT\").",
            "nullable": false
          },
          "beneficiary_bank_account_is_iban": {
            "type": "boolean",
            "description": "Required. If true, validation for true IBAN occurs; otherwise, false.",
            "nullable": false
          },
          "intermediary_bank_street_address": {
            "type": "string",
            "description": "Optional. Max length 35. Street address of the intermediary bank.",
            "nullable": true
          },
          "intermediary_bank_city": {
            "type": "string",
            "description": "Optional. Max length 35. City of the intermediary bank.",
            "nullable": true
          },
          "intermediary_bank_region": {
            "type": "string",
            "description": "Optional. Max length 35. Region of the intermediary bank.",
            "nullable": true
          },
          "intermediary_bank_postal": {
            "type": "string",
            "description": "Optional. Postal code of the intermediary bank.",
            "nullable": true
          },
          "intermediary_bank_country_code": {
            "type": "string",
            "description": "Optional. The 2 or 3 digit code of the country of the intermediary bank.",
            "nullable": true
          },
          "intermediary_bank_name": {
            "type": "string",
            "description": "Optional. Max length 35. Name of the intermediary bank.",
            "nullable": true
          },
          "intermediary_bank_routing_id": {
            "type": "string",
            "description": "Optional. The SWIFT or ABA or Account number of the intermediary bank facilitating the transfer.",
            "nullable": true
          },
          "intermediary_bank_type": {
            "type": "string",
            "description": "Optional. Routing method for intermediary bank facilitating transfer to beneficiary bank.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Required. The amount of the payment request.",
            "nullable": false
          },
          "sending_currency": {
            "type": "string",
            "description": "Required. Currency of the sending account and the currency the beneficiary will receive, to be sent as alphabetic ISO codes (e.g. \"USD\" or \"EUR\").",
            "nullable": false
          },
          "originator_account_number": {
            "type": "string",
            "description": "Required. The Made, LLC account from which the debit will occur.",
            "nullable": false
          },
          "originator_to_beneficiary_info": {
            "type": "string",
            "description": "Optional. Max length 140. Comments field can be used to send reference codes.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Payment Request"
      },
      "PaymentInfoResponse": {
        "type": "object",
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The unique identifier assigned by the payments system. It is returned in successful POST, PATCH, and GET payment responses and can be cross referenced on posted account transactions via GET history.",
            "nullable": true
          },
          "payment_status": {
            "type": "string",
            "description": "The current state with possible values including, \"pre-approval\", \"in-progress\", \"complete\", and \"canceled\"",
            "nullable": true
          },
          "payment_date": {
            "type": "string",
            "description": "The date on which the payment is processed",
            "format": "date-time",
            "nullable": true
          },
          "direction": {
            "type": "string",
            "description": "The direction of payment (\"Incoming\", \"Outgoing\", or \"Internal\")",
            "nullable": true
          },
          "debit_amount": {
            "type": "number",
            "description": "Amount debited from the originating account (value may be delayed or null)",
            "nullable": true
          },
          "credit_amount": {
            "type": "number",
            "description": "Amount credited to the beneficiary account"
          },
          "originator_account_number": {
            "type": "string",
            "description": "The account number of the originator",
            "nullable": true
          },
          "originator_account_currency": {
            "type": "string",
            "description": "Currency ISO code of the originator account",
            "nullable": true
          },
          "originator_type": {
            "type": "string",
            "description": "The type indicates the routing method of the originating bank",
            "nullable": true
          },
          "originator_name": {
            "type": "string",
            "description": "The name of the originator",
            "nullable": true
          },
          "originator_address": {
            "type": "string",
            "description": "The address of the originator",
            "nullable": true
          },
          "originating_bank_id": {
            "type": "string",
            "description": "The USABA routing number, SWIFT BIC, or account number of the originator bank",
            "nullable": true
          },
          "originating_bank_type": {
            "type": "string",
            "description": "The type indicates the routing method of the originating bank",
            "nullable": true
          },
          "originating_bank_name": {
            "type": "string",
            "description": "The name of the originator bank",
            "nullable": true
          },
          "originating_bank_address": {
            "type": "string",
            "description": "The address of the originating bank",
            "nullable": true
          },
          "instructing_bank_id": {
            "type": "string",
            "description": "The USABA routing number, SWIFT BIC, or account number of the instructing bank",
            "nullable": true
          },
          "instructing_bank_type": {
            "type": "string",
            "description": "The type indicates the routing method of the instructing bank",
            "nullable": true
          },
          "instructing_bank_name": {
            "type": "string",
            "description": "The name of the instructing bank",
            "nullable": true
          },
          "instructing_bank_address": {
            "type": "string",
            "description": "The address of the instructing bank",
            "nullable": true
          },
          "intermediary_bank_id": {
            "type": "string",
            "description": "The USABA routing number, SWIFT BIC, or account number of the intermediary bank",
            "nullable": true
          },
          "intermediary_bank_type": {
            "type": "string",
            "description": "The type indicates the routing method of the intermediary bank",
            "nullable": true
          },
          "intermediary_bank_name": {
            "type": "string",
            "description": "The name of the intermediary bank",
            "nullable": true
          },
          "intermediary_bank_address": {
            "type": "string",
            "description": "The address of the intermediary bank",
            "nullable": true
          },
          "sending_bank_id": {
            "type": "string",
            "description": "The USABA routing number, SWIFT BIC, or account number of the sending bank",
            "nullable": true
          },
          "sending_bank_type": {
            "type": "string",
            "description": "The type indicates the routing method of the sending bank",
            "nullable": true
          },
          "sending_bank_name": {
            "type": "string",
            "description": "The name of the sending bank",
            "nullable": true
          },
          "sending_bank_address": {
            "type": "string",
            "description": "The address of the sending bank",
            "nullable": true
          },
          "receiving_bank_id": {
            "type": "string",
            "description": "The USABA routing number, SWIFT BIC, or account number of the receiving bank",
            "nullable": true
          },
          "receiving_bank_type": {
            "type": "string",
            "description": "The type indicates the routing method of the receiving bank",
            "nullable": true
          },
          "receiving_bank_name": {
            "type": "string",
            "description": "The name of the receiving bank",
            "nullable": true
          },
          "receiving_bank_address": {
            "type": "string",
            "description": "The address of the receiving bank",
            "nullable": true
          },
          "beneficiary_bank_id": {
            "type": "string",
            "description": "The USABA routing number, SWIFT BIC, or account number of the beneficiary bank",
            "nullable": true
          },
          "beneficiary_bank_type": {
            "type": "string",
            "description": "The routing method for ultimate destination of funds (\"ABA\", \"SWIFT\" or \"ACCT\")",
            "nullable": true
          },
          "beneficiary_bank_name": {
            "type": "string",
            "description": "The name of the beneficiary bank",
            "nullable": true
          },
          "beneficiary_bank_address": {
            "type": "string",
            "description": "The address of the beneficiary bank",
            "nullable": true
          },
          "beneficiary_bank_country_code": {
            "type": "string",
            "description": "The country code of the beneficiary bank",
            "nullable": true
          },
          "beneficiary_account_number": {
            "type": "string",
            "description": "The account number of the beneficiary",
            "nullable": true
          },
          "beneficiary_account_currency": {
            "type": "string",
            "description": "Currency ISO code of the beneficiary account",
            "nullable": false
          },
          "beneficiary_type": {
            "type": "string",
            "description": "Creditor type, e.g. Acct or ABA",
            "nullable": true
          },
          "beneficiary_name": {
            "type": "string",
            "description": "The name of the beneficiary",
            "nullable": true
          },
          "beneficiary_address": {
            "type": "string",
            "description": "The address of the beneficiary delimited by carriage return line breaks \"\\r\\n\" into 1 to 3 lines",
            "nullable": true
          },
          "beneficiary_country_code": {
            "type": "string",
            "description": "The country code of the beneficiary",
            "nullable": true
          },
          "originator_to_beneficiary_info_line": {
            "type": "string",
            "description": "The customer-defined reference or memo passed along with the payment",
            "nullable": true
          },
          "reference_for_beneficiary": {
            "type": "string",
            "description": "Optional reference information sometimes passed with the payment",
            "nullable": true
          },
          "bank_to_bank_info": {
            "type": "string",
            "description": "An extra payment information reference. In the case of inbound returned payments it may contain free text reasons for the return at the discretion of the sending financial institution.",
            "nullable": true
          },
          "senders_reference": {
            "type": "string",
            "description": "Optional reference information sometimes passed with the payment",
            "nullable": true
          },
          "entry_date": {
            "type": "string",
            "description": "The date the payment is first submitted into the payments system",
            "format": "date-time",
            "nullable": true
          },
          "completion_date": {
            "type": "string",
            "description": "The date of posting to The Made, LLC bank account",
            "format": "date-time",
            "nullable": true
          },
          "cancel_date": {
            "type": "string",
            "description": "The cancelation date, if applicable",
            "format": "date-time",
            "nullable": true
          },
          "time_stamp": {
            "type": "string",
            "description": "The timestamp (UTC) marks the last action on a payment and is critical as an input for POST and PATCH payment.",
            "format": "date-time",
            "nullable": true
          },
          "imad": {
            "type": "string",
            "description": "The Input Message Accountability Data (imad) is a unique number given to each payment which is processed via Fedwire",
            "nullable": true
          },
          "omad": {
            "type": "string",
            "description": "The Output Message Accountability Data (omad) is a unique number given to each payment which is processed via Fedwire",
            "nullable": true
          },
          "swift_uetr": {
            "type": "string",
            "description": "The UETR (Unique End-to-end Transaction Reference) is created for all payments but primarily useful for SWIFT specific tracking across financial institutions.",
            "nullable": true
          },
          "reference_id": {
            "type": "string",
            "description": "This is an additional reference, with a primary use being incoming returns such that, when \"direction\" = \"Incoming\" and \"fedwire_sub_type\" = \"02\" OR \"08\", you can further parse the response and find the original payment IMAD in the \"reference_id\" field.",
            "nullable": true
          },
          "payment_type": {
            "type": "string",
            "description": "The payment type of the specific routing channel",
            "nullable": true
          },
          "payment_sub_type": {
            "type": "string",
            "description": "The sub type of payment with values including; \"00\" = standard, \"02\" = same day return, \"08\" = non same day return",
            "nullable": true
          },
          "source_indicator": {
            "type": "string",
            "description": "Indicates how the payment was initiated - \"API\", \"Portal\" (made's proprietary online banking platform), \"Create\" (manual payments), \"FED\", \"SWIFT\"",
            "nullable": true
          },
          "purpose_of_payment": {
            "type": "string",
            "description": "The indicated reason for sending funds",
            "nullable": true
          },
          "fx_rate": {
            "type": "string",
            "description": "The exchange rate used in a foreign exchange conversion, if applicable",
            "nullable": true
          },
          "rejection_reason": {
            "type": "string",
            "description": "If the bank cannot complete the payment, rejection_reason will be populated with one of the following enumerated reasons \n\"Insufficient Funds\",\n\"Invalid ABA\",\n\"Blocked Country\",\n\"Internal Policy\",\n\"Invalid SWIFT Code\",\n\"Inactive SWIFT Code\",\n\"US Intermediary Required\", \n\"Verbal Callback Required\", \n\"Return of Returned Wire\",\n\"Per Your Request\",\n\"Insufficient Receipt Address\",\n\"ABA for ACH only\",\n\"Invalid format Complete (To be updated manually in BeB)\",\n\"Invalid credit account\",\n\"API - not approved/verified\",\n\"Internal / Compliance Policy\",\n\"Invalid Credit Acct\",\n\"Names Disagree or Name and Acct Do Not Match\",\n\"Travel Rule/PO BOX addr not accepted\",\n\"Unknown Bene\",\n\"Acct Ineligible to receive wires\",\n\"Per Remitter's request\",\n\"Other\"\n",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentPatchRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Required. The allowed actions to take on a payment are \"approve\", \"return\", or \"cancel\".",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Required. The timestamp of the target payment_id, found via POST/PATCH/GET payments responses.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentInstructionsResponse": {
        "type": "object",
        "properties": {
          "inbound_payment_instructions": {
            "$ref": "#/components/schemas/InboundPaymentInstructions"
          },
          "outbound_payment_instructions": {
            "$ref": "#/components/schemas/OutboundPaymentInstructions"
          },
          "value_date": {
            "type": "string",
            "description": "The date on which funds are expected to be transferred to the beneficiary. There is no time component of the value_date.",
            "format": "date-time"
          },
          "trade_id": {
            "type": "string",
            "description": "A unique trade id associated with the request, which (if applicable) can be used at the POST FX payment endpoint",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransferRequest": {
        "type": "object",
        "properties": {
          "account_number_from": {
            "type": "string",
            "description": "Required. The sending aka debit account number",
            "nullable": false
          },
          "account_number_to": {
            "type": "string",
            "description": "Required. The receiving aka credit account number",
            "nullable": false
          },
          "amount": {
            "type": "number",
            "description": "Required. The amount of the transfer request",
            "format": "double",
            "nullable": false
          },
          "currency": {
            "type": "string",
            "description": "Optional. Three-letter ISO code of the currency of the transfer (e.g. \"USD\" or \"EUR\"). Defaults to USD.",
            "nullable": true
          },
          "account_from_description2": {
            "type": "string",
            "description": "Optional. Memo or description line; this value will appear in history record on the debit account (\"account_number_from\")",
            "nullable": true
          },
          "account_from_description3": {
            "type": "string",
            "description": "Optional. Memo or description line; lines 3-7 will appear in history record on the debit account (\"account_number_from\") after end of banking day",
            "nullable": true
          },
          "account_from_description4": { "type": "string", "nullable": true },
          "account_from_description5": { "type": "string", "nullable": true },
          "account_from_description6": { "type": "string", "nullable": true },
          "account_to_description2": {
            "type": "string",
            "description": "Optional. Memo or description line; this value will appear in history record on the credit account (\"account_number_to\")",
            "nullable": true
          },
          "account_to_description3": {
            "type": "string",
            "description": "Optional. Memo or description line; lines 3-7 will appear in history record on the credit account (\"account_number_to\") after end of banking day",
            "nullable": true
          },
          "account_to_description4": { "type": "string", "nullable": true },
          "account_to_description5": { "type": "string", "nullable": true },
          "account_to_description6": { "type": "string", "nullable": true }
        },
        "additionalProperties": false
      },
      "TransferResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The status of the transaction",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebHookListResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of records returned from the request",
            "format": "int32",
            "readOnly": true
          },
          "records": {
            "type": "array",
            "description": "Array of webhooks",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/WebHookResponse" }
          }
        },
        "additionalProperties": false,
        "description": "Webhooks List Response"
      },
      "WebHookRequest": {
        "type": "object",
        "properties": {
          "account_number": {
            "type": "string",
            "description": "Required. The Made, LLC account number of your query.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Optional. A user defined description.",
            "nullable": true
          },
          "web_hook_url": {
            "type": "string",
            "description": "Required if an email not provided. It must be a well formed and valid url. POST back is JSON body with account_number, available_balance, and previous_balance only.",
            "nullable": true
          },
          "emails": {
            "type": "string",
            "description": "Optional. Email or comma-separated list of emails for account balance update notification.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebHookResponse": {
        "type": "object",
        "properties": {
          "web_hook_id": {
            "type": "string",
            "description": "The id of the webhook returned from the registration process",
            "nullable": true
          },
          "account_number": {
            "type": "string",
            "description": "The associated made account number of the intended webhook(s)",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "User-entered description sent in webhook registration process",
            "nullable": true
          },
          "web_hook_url": {
            "type": "string",
            "description": "User-entered URL sent in webhook registration process",
            "nullable": true
          },
          "emails": {
            "type": "string",
            "description": "User-entered email or emails sent in webhook registration process",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HistoryRecord": {
        "type": "object",
        "properties": {
          "payment_id": {
            "type": "string",
            "description": "The payments subsystem identifier for any transaction processed via payment rails including US fed wires and swift payments",
            "nullable": true
          },
          "transaction_code": {
            "type": "string",
            "description": "The core system codes identify type of transaction giving indications of method of payment and debit vs credit",
            "nullable": true
          },
          "transaction_amount": {
            "type": "number",
            "description": "The transaction amount",
            "format": "double"
          },
          "transaction_description": {
            "type": "string",
            "description": "The primary description line",
            "nullable": true
          },
          "transaction_description2": {
            "type": "string",
            "description": "The second description line; This and the primary description lines are the only 2 which are are returned prior to a transaction being hard posted (run through the an end of banking day process).",
            "nullable": true
          },
          "transaction_description3": {
            "type": "string",
            "description": "The third description line",
            "nullable": true
          },
          "transaction_description4": {
            "type": "string",
            "description": "The fourth description line",
            "nullable": true
          },
          "transaction_description5": {
            "type": "string",
            "description": "The fifth description line",
            "nullable": true
          },
          "transaction_description6": {
            "type": "string",
            "description": "The sixth description line",
            "nullable": true
          },
          "effective_date": {
            "type": "string",
            "description": "A transaction's effective date, which is always a banking day. There is no time component of the effective_date.",
            "format": "date-time",
            "nullable": true
          },
          "running_available_balance": {
            "type": "number",
            "description": "A snapshot of the available balance at the time of transaction posting; available only after a transaction has hard posted",
            "format": "double",
            "nullable": true
          },
          "memo_post_indicator": {
            "type": "string",
            "description": "Posted (\"hard post\") transactions have completed close of banking day processing; memo-posted (\"memo post\") transactions have not completed processing",
            "nullable": true
          },
          "debit_credit_flag": {
            "type": "string",
            "description": "This flag indicates whether a transaction is inbound (\"credit\") or outbound (\"debit\")",
            "nullable": true
          },
          "unique_id": {
            "type": "string",
            "description": "An identifier assigned to each history record, usually an encoded base64 string, where possible simplified to a GUID in the case of some payment types. Note, a UniqueId obtained via v2 API may differ from its v3 counterpart.",
            "nullable": true
          },
          "sen_transfer_response": {
            "$ref": "#/components/schemas/SenTransferResponse"
          }
        },
        "additionalProperties": false
      },
      "CustomerAccount": {
        "type": "object",
        "properties": {
          "account_number": {
            "type": "string",
            "description": "The Made, LLC account number",
            "nullable": true
          },
          "legal_entity_Name": {
            "type": "string",
            "description": "The name of the legal entity that owns the account",
            "nullable": true
          },
          "alias": {
            "type": "string",
            "description": "The alias for the account, set via The Made, LLC Portal",
            "nullable": true
          },
          "account_type": {
            "type": "string",
            "description": "Descriptive names for The Made, LLC account types",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "Three-character ISO code of the currency that can be deposited into the account",
            "nullable": true
          },
          "services": {
            "type": "array",
            "description": "Array of services enabled to this account via this subscription; list will be empty if account is read-only",
            "nullable": true,
            "example": ["Internal Transfer", "SEN Transfer"],
            "items": { "type": "string" }
          }
        },
        "additionalProperties": false
      },
      "ContactResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of records (account_ids) associated with a subsequent contact_id",
            "format": "int32",
            "readOnly": true
          },
          "accounts": {
            "type": "array",
            "description": "Array of accounts associated with the subscription, filtered by trade-id or currency if either parameter is passed",
            "nullable": true,
            "items": { "$ref": "#/components/schemas/ExternalAccountResponse" }
          },
          "contact_id": {
            "type": "string",
            "description": "Unique identifier for the contact associated with the preceeding accounts",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the contact",
            "nullable": true
          },
          "street_address": {
            "type": "string",
            "description": "Street address of the contact",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City of the street address of the contact",
            "nullable": true
          },
          "region": {
            "type": "string",
            "description": "Region of the street address of the contact",
            "nullable": true
          },
          "postal": {
            "type": "string",
            "description": "Postal code of the street address of the contact",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Country of the street address of the contact",
            "nullable": true
          },
          "country_code": {
            "type": "string",
            "description": "ISO country code of the street address of the contact",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "External Contact Response"
      },
      "OwnedExternalAccountResponse": {
        "type": "object",
        "properties": {
          "beneficiary_name": {
            "type": "string",
            "description": "Legal owner name of the owned account",
            "nullable": true
          },
          "beneficiary_street_address": {
            "type": "string",
            "description": "Street address where the entity is located",
            "nullable": true
          },
          "beneficiary_city": {
            "type": "string",
            "description": "City of the street address where the entity is located",
            "nullable": true
          },
          "beneficiary_region": {
            "type": "string",
            "description": "Region of the street address the entity is located",
            "nullable": true
          },
          "beneficiary_postal": {
            "type": "string",
            "description": "Postal code of the street address where the entity is located",
            "nullable": true
          },
          "beneficiary_country": {
            "type": "string",
            "description": "Country of the street address where the entity is located",
            "nullable": true
          },
          "beneficiary_country_code": {
            "type": "string",
            "description": "Country code of the street address where the entity is located",
            "nullable": true
          },
          "account_id": {
            "type": "string",
            "description": "Account unique identifier, which can be used in POST FX Payment with non-ad hoc payments",
            "format": "uuid"
          },
          "alias": {
            "type": "string",
            "description": "A easily recognized name or label representing the account",
            "nullable": true
          },
          "account_number": {
            "type": "string",
            "description": "Account number belonging to the beneficiary",
            "nullable": true
          },
          "is_iban": {
            "type": "boolean",
            "description": "\"True\" if the account_number is an International Bank Account Number (IBAN)"
          },
          "is_bic": {
            "type": "boolean",
            "description": "\"True\" if the routing_number is a SWIFT BIC (SWIFT Bank Identification Code)"
          },
          "currency": {
            "type": "string",
            "description": "ISO code of the currency that can be deposited into the account",
            "nullable": true
          },
          "beneficiary_bank_name": {
            "type": "string",
            "description": "Name of the bank where the account_number is located",
            "nullable": true
          },
          "beneficiary_bank_routing_number": {
            "type": "string",
            "description": "SWIFT BIC (Bank Identifier Code) or ABA routing number of the beneficiary bank",
            "nullable": true
          },
          "beneficiary_bank_branch": {
            "type": "string",
            "description": "Specific branch of the beneficiary bank",
            "nullable": true
          },
          "beneficiary_bank_street_address": {
            "type": "string",
            "description": "Street address where the beneficiary bank is located",
            "nullable": true
          },
          "beneficiary_bank_city": {
            "type": "string",
            "description": "City the beneficiary bank is located",
            "nullable": true
          },
          "beneficiary_bank_region": {
            "type": "string",
            "description": "Region the beneficiary bank is located",
            "nullable": true
          },
          "beneficiary_bank_postal": {
            "type": "string",
            "description": "Postal code where the beneficiary bank is located",
            "nullable": true
          },
          "beneficiary_bank_country": {
            "type": "string",
            "description": "Country the beneficiary bank is located",
            "nullable": true
          },
          "beneficiary_bank_country_code": {
            "type": "string",
            "description": "ISO country code for the country where the beneficiary bank is located",
            "nullable": true
          },
          "intermediary_bank_name": {
            "type": "string",
            "description": "Name of the intermediary bank",
            "nullable": true
          },
          "intermediary_bank_routing_number": {
            "type": "string",
            "description": "SWIFT BIC (Bank Identifier Code) or ABA routing number of the intermediary bank",
            "nullable": true
          },
          "intermediary_bank_branch": {
            "type": "string",
            "description": "Specific branch of the intermediary bank",
            "nullable": true
          },
          "intermediary_bank_street_address": {
            "type": "string",
            "description": "Street address where the intermediary bank is located",
            "nullable": true
          },
          "intermediary_bank_city": {
            "type": "string",
            "description": "City the intermediary bank is located",
            "nullable": true
          },
          "intermediary_bank_region": {
            "type": "string",
            "description": "Region the intermediary bank is located",
            "nullable": true
          },
          "intermediary_bank_postal": {
            "type": "string",
            "description": "Postal code where the intermediary bank is located",
            "nullable": true
          },
          "intermediary_bank_country": {
            "type": "string",
            "description": "Country the intermediary bank is located",
            "nullable": true
          },
          "intermediary_bank_country_code": {
            "type": "string",
            "description": "ISO country code for the country where the intermediary bank is located",
            "nullable": true
          },
          "sort_code": {
            "type": "string",
            "description": "Unique bank branch identifier required by Australian banks and optional for Canadian banks",
            "nullable": true
          },
          "indian_financial_system_code": {
            "type": "string",
            "description": "Unique bank branch identifier for banks located in India (if applicable)",
            "nullable": true
          },
          "china_national_advanced_payments_system": {
            "type": "string",
            "description": "A clearing code used by banks located in China (if applicable)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Owned External Account Response"
      },
      "PurposesOfPayment": {
        "type": "integer",
        "description": "Required. The reason for sending funds. <br />As of August 2021, the integer representations are <br />1 = ClaimPayment,<br />2 = CreditCardPayment, <br />3 = CryptoSettlement, <br />4 = CustomerAccount, <br />5 = EmployeeOrConsultantPayroll, <br />6 = ExpenseReimbursement, <br />7 = GovernmentRegistration, <br />8 = Investments, <br />9 = NonDividendsDistribution, <br />10 = PurchaseOfRealEstate, <br />11 = RentOrUtilities, <br />12 = TaxPayment,  <br />13 = TransferBetweenOwnAccounts, <br />14 = VendorConsultingCompany, <br />15 = VendorForLegalServices, <br />16 = VendorForSoftwareOrHardware, <br />17 = VendorOther, <br />18 = Other",
        "format": "int32",
        "enum": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
      },
      "InboundPaymentInstructions": {
        "type": "object",
        "properties": {
          "beneficiary_bank_name": {
            "type": "string",
            "description": "The name of bank where the account_number is located",
            "nullable": true
          },
          "beneficiary_bank_swift": {
            "type": "string",
            "description": "The SWIFT BIC (Bank Identifier Code)",
            "nullable": true
          },
          "beneficiary_bank_account_number": {
            "type": "string",
            "description": "The account number belonging to the entity (beneficiary)",
            "nullable": true
          },
          "beneficiary_bank_iban": {
            "type": "string",
            "description": "The International Bank Account Number (IBAN)",
            "nullable": true
          },
          "beneficiary": {
            "type": "string",
            "description": "The Legal owner name of the owned account",
            "nullable": true
          },
          "instructions": {
            "type": "string",
            "description": "Next steps guidance",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OutboundPaymentInstructions": {
        "type": "object",
        "properties": {
          "external_account_type": {
            "type": "string",
            "description": "The general identification of the end beneficiary/trade purpose (\"Owned\", \"ThirdParty\", or \"ThirdPartyCrypto\")",
            "nullable": true
          },
          "instructions": {
            "type": "string",
            "description": "Next steps guidance",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SenTransferResponse": {
        "type": "object",
        "properties": {
          "counter_party_account_number": {
            "type": "string",
            "description": "The Made, LLC account number of the SEN transaction counterparty",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Date and time when a transaction took place (Pacific Time for all trancodes except 9086 & 4007, which are UTC)",
            "nullable": true
          },
          "sender_memo": {
            "type": "string",
            "description": "Optional memo included by the sender",
            "nullable": true
          },
          "counter_party_legal_name": {
            "type": "string",
            "description": "The legal name of the account owning entity as identified in onboarding to made",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalAccountResponse": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account unique identifier, which can be used in POST FX Payment with non-ad hoc payments",
            "format": "uuid"
          },
          "alias": {
            "type": "string",
            "description": "A easily recognized name or label representing the account",
            "nullable": true
          },
          "account_number": {
            "type": "string",
            "description": "Account number belonging to the beneficiary",
            "nullable": true
          },
          "is_iban": {
            "type": "boolean",
            "description": "\"True\" if the account_number is an International Bank Account Number (IBAN)"
          },
          "is_bic": {
            "type": "boolean",
            "description": "\"True\" if the routing_number is a SWIFT BIC (SWIFT Bank Identification Code)"
          },
          "currency": {
            "type": "string",
            "description": "ISO code of the currency that can be deposited into the account",
            "nullable": true
          },
          "beneficiary_bank_name": {
            "type": "string",
            "description": "Name of the bank where the account_number is located",
            "nullable": true
          },
          "beneficiary_bank_routing_number": {
            "type": "string",
            "description": "SWIFT BIC (Bank Identifier Code) or ABA routing number of the beneficiary bank",
            "nullable": true
          },
          "beneficiary_bank_branch": {
            "type": "string",
            "description": "Specific branch of the beneficiary bank",
            "nullable": true
          },
          "beneficiary_bank_street_address": {
            "type": "string",
            "description": "Street address where the beneficiary bank is located",
            "nullable": true
          },
          "beneficiary_bank_city": {
            "type": "string",
            "description": "City the beneficiary bank is located",
            "nullable": true
          },
          "beneficiary_bank_region": {
            "type": "string",
            "description": "Region the beneficiary bank is located",
            "nullable": true
          },
          "beneficiary_bank_postal": {
            "type": "string",
            "description": "Postal code where the beneficiary bank is located",
            "nullable": true
          },
          "beneficiary_bank_country": {
            "type": "string",
            "description": "Country the beneficiary bank is located",
            "nullable": true
          },
          "beneficiary_bank_country_code": {
            "type": "string",
            "description": "ISO country code for the country where the beneficiary bank is located",
            "nullable": true
          },
          "intermediary_bank_name": {
            "type": "string",
            "description": "Name of the intermediary bank",
            "nullable": true
          },
          "intermediary_bank_routing_number": {
            "type": "string",
            "description": "SWIFT BIC (Bank Identifier Code) or ABA routing number of the intermediary bank",
            "nullable": true
          },
          "intermediary_bank_branch": {
            "type": "string",
            "description": "Specific branch of the intermediary bank",
            "nullable": true
          },
          "intermediary_bank_street_address": {
            "type": "string",
            "description": "Street address where the intermediary bank is located",
            "nullable": true
          },
          "intermediary_bank_city": {
            "type": "string",
            "description": "City the intermediary bank is located",
            "nullable": true
          },
          "intermediary_bank_region": {
            "type": "string",
            "description": "Region the intermediary bank is located",
            "nullable": true
          },
          "intermediary_bank_postal": {
            "type": "string",
            "description": "Postal code where the intermediary bank is located",
            "nullable": true
          },
          "intermediary_bank_country": {
            "type": "string",
            "description": "Country the intermediary bank is located",
            "nullable": true
          },
          "intermediary_bank_country_code": {
            "type": "string",
            "description": "ISO country code for the country where the intermediary bank is located",
            "nullable": true
          },
          "sort_code": {
            "type": "string",
            "description": "Unique bank branch identifier required by Australian banks and optional for Canadian banks",
            "nullable": true
          },
          "indian_financial_system_code": {
            "type": "string",
            "description": "Unique bank branch identifier for banks located in India (if applicable)",
            "nullable": true
          },
          "china_national_advanced_payments_system": {
            "type": "string",
            "description": "A clearing code used by banks located in China (if applicable)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contact External Account Response"
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "description": "Each Subscription is assigned a unique key for which specific permissions may be applied. (Sample - ae4ef59ss4s576wrx9woa1c8266wx598)",
        "name": "Ocp-Apim-Subscription-Key",
        "in": "header"
      },
      "AuthSignature": {
        "type": "apiKey",
        "description": "This is the client generated signature based on the data sent to the API and signed in an HMAC512 crypto as a base64 string. See next section \"Generating a Signature\" for more details. (Sample - 5uq8DE/es4ynoYJNrTUmqRwwkF83v0iyfwlBRZvXdkMjUr/wnl6Bsyd2l+s8F6eUBUojOL1o6I4YM4bhmXlFtP==)",
        "name": "X-Auth-Signature",
        "in": "header"
      },
      "AuthNonce": {
        "type": "apiKey",
        "description": "A unique random number which cannot be reused within 150 seconds. It is required to aid against cases of replay attacks. (Sample - 200000000000000019396438692759230000)",
        "name": "X-Auth-Nonce",
        "in": "header"
      },
      "AuthTimestamp": {
        "type": "apiKey",
        "description": "The UTC time when the request is generated. It is used to validate the request is not stale when it is received. (Sample - 2020-04-12T21:02:11.222)",
        "name": "X-Auth-Timestamp",
        "in": "header"
      },
      "AuthVersion": {
        "type": "apiKey",
        "description": "The authentication version which should be defaulted to \"v1\". It may be used in the future if the authentication is modified.",
        "name": "X-Auth-Version",
        "in": "header"
      }
    }
  },
  "x-readme": {
    "explorer-enabled": true,
    "proxy-enabled": true,
    "samples-enabled": true
  }
}
