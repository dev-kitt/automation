{
	"info": {
		"_postman_id": "00000000-0000-0000-0000-000000000000",
		"name": "Regression Negative Path",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17221433"
	},
	"item": [
		{
			"name": "Stage",
			"item": [
				{
					"name": "Account",
					"item": [
						{
							"name": "GET Account",
							"item": [
								{
									"name": "account/list (subscription has no acct)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Call to DB is success, Subscription has no account\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"//Subscription : PM v3 Stg Regression Sub - No Account",
													"//This subscription has no account toggled on in portal",
													"//ceteris paribus",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-000000000000\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/list",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "account/list (subscription suspended)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Subscription suspended\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Make sure to provide a valid key for an active subscription\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"active\");",
													"});",
													"",
													"//Subscription : PM v3 Stg Regression Sub - Suspended",
													"//This subscription as beed suspended in BOA",
													"//ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-000000000000\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/list",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "account/list (incorrect sub key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Subscription key missing or incorrect\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Access denied due to invalid subscription key\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid\");",
													"});",
													"",
													"//Subscription : PM v3 Stg Regression Sub - Diff accts",
													"//incorrect subscription key passed",
													"//ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-000000000000\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/list",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "account/list (incorrect signature)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect signature passed\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid signature\");",
													"});",
													"",
													"//Subscription : PM v3 Stg Regression Sub - Diff accts",
													"//Incorrect apisecret passed",
													"//ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/list",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "account/list (incorrect nonce)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect or missing nonce\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"//the test script has no nonce",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid signature\");",
													"});",
													"",
													"//Subscription : PM v3 Stg Regression Sub - Diff accts",
													"//no nonce passed",
													"//ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = \"678\";\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: \"qrs\"\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/list",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "account/list (incorrect timestamp)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect or missing header timestamp\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid signature\");",
													"});",
													"",
													"//Subscription : PM v3 Stg Regression Sub - Diff accts",
													"//no timestamp passed",
													"//ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: \"Tue, 04 Oct 2022 15:40:21 GMT\"\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/list",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "account/list (incorrect version)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect or missing version\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid signature\");",
													"});",
													"",
													"//Subscription : PM v3 Stg Regression Sub - Diff accts",
													"//no version passed",
													"//ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: \"9\"\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/list",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												"list"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GET History (Flag On)",
							"item": [
								{
									"name": "History - Acct # Missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Acct # Missing - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});",
													"",
													"pm.test(\"No Records Returned\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(\"records\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?is-real-time=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-03-31",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQk4LzMvMjAyMQkxMC4wMAk5MDczCUwwODNDMzEwMFAwRzJBSjYJIE9VVEdPSU5HIFdJUkUgRkVF",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Invalid Sort Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Invalid Sort Order - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid sort order\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?sort-order=dec&is-real-time=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-03-31",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "dec"
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQk4LzMvMjAyMQkxMC4wMAk5MDczCUwwODNDMzEwMFAwRzJBSjYJIE9VVEdPSU5HIFdJUkUgRkVF",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "1234567980"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Invalid Unique ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Invalid Unique ID - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Unique Id is an invalid format\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?is-real-time=true&unique-id=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-03-31",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "2"
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "1234567980"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Unique ID No Match",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Unique ID No Match - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Unique Id is an invalid format\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?is-real-time=true&unique-id=NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"description": "\"=\" is missing at the end"
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "1234567980"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Acct # Present, Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Account # Present, Invalid - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?is-real-time=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "5091019909"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Acct # Not Present",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Account # Not Present - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?is-real-time=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "0000000000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Subscription Suspended",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History - Subscription Suspended\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Access Denied\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"active\");",
													"});",
													"",
													"//Subscription : PM v3 Stg Regression Sub - Suspended",
													"//This subscription as beed suspended in BOA",
													"//ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?is-real-time=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Acct Inactive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Account is inactive - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});",
													"",
													"//Subscription : PM v3 Stg Regression Sub - Diff Accts",
													"//When tested with an active acct, happy path returns",
													"//This is tested with 1142309010 - inactive account",
													"//ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?is-real-time=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "1142309010"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GET History (Flag Off)",
							"item": [
								{
									"name": "History - Acct # Missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Acct # Missing - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});",
													"",
													"pm.test(\"No Records Returned\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(\"records\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-03-31",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true",
													"disabled": true
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQk4LzMvMjAyMQkxMC4wMAk5MDczCUwwODNDMzEwMFAwRzJBSjYJIE9VVEdPSU5HIFdJUkUgRkVF",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Invalid Sort Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Invalid Sort Order - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid sort order\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?sort-order=dec",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-03-31",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "dec"
												},
												{
													"key": "is-real-time",
													"value": "true",
													"disabled": true
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQk4LzMvMjAyMQkxMC4wMAk5MDczCUwwODNDMzEwMFAwRzJBSjYJIE9VVEdPSU5HIFdJUkUgRkVF",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "1234567980"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Invalid Unique ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Invalid Unique ID - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Unique Id is an invalid format\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?unique-id=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-03-31",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true",
													"disabled": true
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "2"
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "1234567980"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Unique ID No Match",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Unique ID No Match - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Unique Id is an invalid format\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?unique-id=NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true",
													"disabled": true
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"description": "\"=\" is missing at the end"
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "1234567980"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Acct # Present, Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Account # Present, Invalid - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true",
													"disabled": true
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "5091019909"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Acct # Not Present",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Account # Not Present - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true",
													"disabled": true
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "0000000000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Subscription Suspended",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History - Subscription Suspended\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Access Denied\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"active\");",
													"});",
													"",
													"//Subscription : PM v3 Stg Regression Sub - Suspended",
													"//This subscription as beed suspended in BOA",
													"//ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true",
													"disabled": true
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Acct Inactive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Account is inactive - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});",
													"",
													"//Subscription : PM v3 Stg Regression Sub - Diff Accts",
													"//When tested with an active acct, happy path returns",
													"//This is tested with 1142309010 - inactive account",
													"//ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true",
													"disabled": true
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "1142309010"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Payment",
					"item": [
						{
							"name": "POST Payment",
							"item": [
								{
									"name": "Post",
									"item": [
										{
											"name": "POST Payment",
											"item": []
										},
										{
											"name": "Post Payment - Pre Test for IK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST payment, PreTest for IK - 201 Created\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Completed Successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Pre-Approval\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Idempotency-Key",
														"value": "2b0942ce-a597-4f04-9dc0-10f9977b159c",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"amount\": 3,\r\n\t\"originator_account_number\": \"1234567980\",\r\n\t\"sending_currency\": \"USD\",\r\n\t\"beneficiary_bank_account_number\": \"123456789\",\r\n    \"beneficiary_bank_account_is_iban\": false,\r\n\t\"beneficiary_name\": \"hello regresion testing\",\r\n\t\"beneficiary_street_address\": \"222 Weinerschnitzle Lane\",\r\n\t\"beneficiary_city\": \"San Francisco\",\r\n    \"beneficiary_region\": \"CA\",\r\n    \"beneficiary_country_code\": \"CA\",\r\n    \"beneficiary_bank_type\": \"ABA\",\r\n\t\"beneficiary_bank_routing_id\": \"322271627\",\r\n\t\"beneficiary_bank_name\": \"JPMorgan Chase Bank\",\r\n\t\"beneficiary_bank_street_address\": \"1111 Polaris Parkway\",\r\n\t\"beneficiary_bank_city\": \"Columbus\",\r\n\t\"beneficiary_bank_region\": \"OH\",\r\n    \"beneficiary_bank_postal\": \"43240\",\r\n    \"beneficiary_bank_country_code\": \"US\",\r\n    \"originator_to_beneficiary_info\": \"\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/payment",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"payment"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Payment - Same IK, diff body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST Payment, Same IK, Diff Body - 409 Conflict\", function () {\r",
															"    pm.response.to.have.status(409);\r",
															"});\r",
															"\r",
															"pm.test(\"Error Message : Request does not match original request with corresponding idempotency key\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"original request\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Idempotency-Key",
														"value": "2b0942ce-a597-4f04-9dc0-10f9977b159c",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"amount\": 4,\r\n\t\"originator_account_number\": \"1234567980\",\r\n\t\"sending_currency\": \"USD\",\r\n\t\"beneficiary_bank_account_number\": \"123456789\",\r\n    \"beneficiary_bank_account_is_iban\": false,\r\n\t\"beneficiary_name\": \"hello regresion testing\",\r\n\t\"beneficiary_street_address\": \"222 Weinerschnitzle Lane\",\r\n\t\"beneficiary_city\": \"San Francisco\",\r\n    \"beneficiary_region\": \"CA\",\r\n    \"beneficiary_country_code\": \"CA\",\r\n    \"beneficiary_bank_type\": \"ABA\",\r\n\t\"beneficiary_bank_routing_id\": \"322271627\",\r\n\t\"beneficiary_bank_name\": \"JPMorgan Chase Bank\",\r\n\t\"beneficiary_bank_street_address\": \"1111 Polaris Parkway\",\r\n\t\"beneficiary_bank_city\": \"Columbus\",\r\n\t\"beneficiary_bank_region\": \"OH\",\r\n    \"beneficiary_bank_postal\": \"43240\",\r\n    \"beneficiary_bank_country_code\": \"US\",\r\n    \"originator_to_beneficiary_info\": \"\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/payment",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"payment"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Payment - Pre Test for IK Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"POST payment, PreTest for IK - 201 Created\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Completed Successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Pre-Approval\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Idempotency-Key",
														"value": "2b0942ce-a597-4f04-9dc0-10f9977b159c",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"amount\": 3,\r\n\t\"originator_account_number\": \"1234567980\",\r\n\t\"sending_currency\": \"USD\",\r\n\t\"beneficiary_bank_account_number\": \"123456789\",\r\n    \"beneficiary_bank_account_is_iban\": false,\r\n\t\"beneficiary_name\": \"hello regresion testing\",\r\n\t\"beneficiary_street_address\": \"222 Weinerschnitzle Lane\",\r\n\t\"beneficiary_city\": \"San Francisco\",\r\n    \"beneficiary_region\": \"CA\",\r\n    \"beneficiary_country_code\": \"CA\",\r\n    \"beneficiary_bank_type\": \"ABA\",\r\n\t\"beneficiary_bank_routing_id\": \"322271627\",\r\n\t\"beneficiary_bank_name\": \"JPMorgan Chase Bank\",\r\n\t\"beneficiary_bank_street_address\": \"1111 Polaris Parkway\",\r\n\t\"beneficiary_bank_city\": \"Columbus\",\r\n\t\"beneficiary_bank_region\": \"OH\",\r\n    \"beneficiary_bank_postal\": \"43240\",\r\n    \"beneficiary_bank_country_code\": \"US\",\r\n    \"originator_to_beneficiary_info\": \"\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/payment",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"payment"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get",
							"item": [
								{
									"name": "Get Payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"good response\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"payment created\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"payment_id\")\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});\r",
													"\r",
													"pm.test(\"PIM is present\", function () {\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"   //pm.globals.set(\"pim\",  jsonData[0].payment_id);\r",
													"   //pm.globals.set(\"pim_timestamp\",  jsonData[0].time_stamp);\r",
													"   postman.setEnvironmentVariable('pim', jsonData[0].payment_id);\r",
													"   postman.setEnvironmentVariable('pim_timestamp', jsonData[0].time_stamp);\r",
													"});\r",
													"\r",
													"\r",
													"setTimeout(function(){}, [1500]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"type": "text",
												"value": "{{subscriptionKey}}"
											},
											{
												"key": "Ocp-Apim-Trace",
												"type": "text",
												"value": "true"
											},
											{
												"key": "X-Auth-Signature",
												"type": "text",
												"value": "{{signature}}"
											},
											{
												"key": "X-Auth-Nonce",
												"type": "text",
												"value": "{{nonce}}"
											},
											{
												"key": "X-Auth-Timestamp",
												"type": "text",
												"value": "{{date}}"
											},
											{
												"key": "X-Auth-Version",
												"type": "text",
												"value": "{{version}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/api/payment/:payment-id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"payment",
												":payment-id"
											],
											"variable": [
												{
													"key": "payment-id",
													"value": "L09790527G9T1ID9",
													"description": "L08OK38350ZS0WKM, L09790527G9T1ID9"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Payments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"good response\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"payment created\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"payment_id\")\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});\r",
													"\r",
													"pm.test(\"PIM is present\", function () {\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"   //pm.globals.set(\"pim\",  jsonData[0].payment_id);\r",
													"   //pm.globals.set(\"pim_timestamp\",  jsonData[0].time_stamp);\r",
													"   postman.setEnvironmentVariable('pim', jsonData.records[0].payment_id);\r",
													"   postman.setEnvironmentVariable('pim_timestamp', jsonData.records[0].time_stamp);\r",
													"});\r",
													"\r",
													"\r",
													"setTimeout(function(){}, [1500]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"type": "text",
												"value": "{{subscriptionKey}}"
											},
											{
												"key": "Ocp-Apim-Trace",
												"type": "text",
												"value": "true"
											},
											{
												"key": "X-Auth-Signature",
												"type": "text",
												"value": "{{signature}}"
											},
											{
												"key": "X-Auth-Nonce",
												"type": "text",
												"value": "{{nonce}}"
											},
											{
												"key": "X-Auth-Timestamp",
												"type": "text",
												"value": "{{date}}"
											},
											{
												"key": "X-Auth-Version",
												"type": "text",
												"value": "{{version}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/api/payment?account-number=1234567980&begin-date=07/01/2022&end-date=07/30/2022&page-size=100&page-number=1&sort-order=asc",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"payment"
											],
											"query": [
												{
													"key": "account-number",
													"value": "1234567980"
												},
												{
													"key": "begin-date",
													"value": "07/01/2022"
												},
												{
													"key": "end-date",
													"value": "07/30/2022"
												},
												{
													"key": "page-size",
													"value": "100"
												},
												{
													"key": "page-number",
													"value": "1"
												},
												{
													"key": "sort-order",
													"value": "asc"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Transfer",
					"item": [
						{
							"name": "POST Internal Transfer",
							"item": [
								{
									"name": "Internal Transfer - PreTest for IK",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer PreTest for IK - 201 Created\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Completed Successfully\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Completed\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Pre Test for IK\",\r\n  \"account_to_description2\": \"Pre Test for IK\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Same IK, Diff Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer Same IK, Diff Body - 409 Conflict\", function () {",
													"    pm.response.to.have.status(409);",
													"});",
													"",
													"pm.test(\"Error Message : Request does not match original request with corresponding idempotency key\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"original request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Same IK, Diff Body\",\r\n  \"account_to_description2\": \"Same IK, Diff Body\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - JSON Formatting Corrupt",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer JSON Formatting Corrupt - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Validation errors occurred\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"validation errors\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"JSON Formatting Corrupt\",\r\n  \"account_to_description2\": \"JSON Formatting Corrupt\",\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Max Field Length Exceeded",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer Max Field Length Exceeded - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Length must be less than or equal to 40 characters\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Max Field Length Exceeded Testing.. so the description has to be really really long\",\r\n  \"account_to_description2\": \"Max Field Length Exceeded Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Amount Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer Amount Invalid - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Amount is less than or equal to 0\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"less than\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 0,\r\n  \"account_from_description2\": \"Amount Invalid 0\",\r\n  \"account_to_description2\": \"Amount Invalid 0\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Required fields not provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer Required fields not provided - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : account_number_from is required\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"required\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Required fields not provided\",\r\n  \"account_to_description2\": \"Required fields not provided\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - IK not a GUID or UUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer IK not a GUID or UUID - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Idempotency Key is not a valid GUID\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"GUID\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "0",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"IK not a GUID or UUID, passed 0\",\r\n  \"account_to_description2\": \"IK not a GUID or UUID, passed 0\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Limit Exceeded",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer Limit Exceeded - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : limit has been exceeded by $$$\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"limit\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 9999999999999,\r\n  \"account_from_description2\": \"Limit Exceeded testing\",\r\n  \"account_to_description2\": \"Limit Exceeded testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Insufficient Funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer Insufficient Funds - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Insufficient available balance\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Insufficient\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142409018\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Insufficient Fund Testing\",\r\n  \"account_to_description2\": \"Insufficient Fund Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Acct IT no service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer not permissioned for account - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1067309011\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Acct no IT service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer service not permissioned for account - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"4400009902\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Profile no IT permission (IP)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer not permissioned for account - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1067309011\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Suspended Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer, Suspended Subscription - 401 Access Denied\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Access Denied\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142409018\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Acct Inactive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer Inactive Account - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Inactive Account Testing\",\r\n  \"account_to_description2\": \"Inactive Account Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Incorrect Sub Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer - Incorrect or missing subscription key\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Access denied\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-000000000000\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Incorrect Signature",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer - Incorrect or missing signature\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Incorrect Nonce",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer - Incorrect or missing nonce\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Incorrect Timestamp",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer - Incorrect or missing timestamp\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Incorrect Version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer - Incorrect or missing version\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "POST SEN Transfer",
							"item": [
								{
									"name": "SEN Transfer - PreTest for IK",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer PreTest for IK - 201 Created\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Completed Successfully\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Completed\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "12acdf0e-f42c-481b-885f-57762146f46d",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Pre Test for IK\",\r\n  \"account_to_description2\": \"Pre Test for IK\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Same IK, Diff Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer Same IK, Diff Body - 409 Conflict\", function () {",
													"    pm.response.to.have.status(409);",
													"});",
													"",
													"pm.test(\"Error Message : Request does not match original request with corresponding idempotency key\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"original request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "12acdf0e-f42c-481b-885f-57762146f46d",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Same IK, Diff Body\",\r\n  \"account_to_description2\": \"Same IK, Diff Body\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - JSON Formatting Corrupt",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer JSON Formatting Corrupt - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Validation errors occurred\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"validation errors\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"JSON Formatting Corrupt\",\r\n  \"account_to_description2\": \"JSON Formatting Corrupt\",\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Max Field Length Exceeded",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer Max Field Length Exceeded - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Length must be less than or equal to 40 characters\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Max Field Length Exceeded Testing.. so the description has to be really really long\",\r\n  \"account_to_description2\": \"Max Field Length Exceeded Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Amount Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer Amount Invalid - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Amount is less than or equal to 0\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"less than\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 0,\r\n  \"account_from_description2\": \"Amount Invalid 0\",\r\n  \"account_to_description2\": \"Amount Invalid 0\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Required fields not provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer Required fields not provided - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : account_number_from is required\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"required\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Required fields not provided\",\r\n  \"account_to_description2\": \"Required fields not provided\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - IK not a GUID or UUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer IK not a GUID or UUID - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Idempotency Key is not a valid GUID\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"GUID\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "0",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"IK not a GUID or UUID, passed 0\",\r\n  \"account_to_description2\": \"IK not a GUID or UUID, passed 0\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Limit Exceeded",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer Limit Exceeded - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : limit has been exceeded by $$$\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"limit\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 9999999999999,\r\n  \"account_from_description2\": \"Limit Exceeded testing\",\r\n  \"account_to_description2\": \"Limit Exceeded testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Insufficient Funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer Insufficient Funds - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Insufficient available balance\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Insufficient\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142409018\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Insufficient Fund Testing\",\r\n  \"account_to_description2\": \"Insufficient Fund Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Acct no ST service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer service not permissioned for account - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"4400009902\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Profile no IT permission (IP)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer not permissioned for account - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1067309011\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Suspended Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer, Suspended Subscription - 401 Access Denied\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Access Denied\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142409018\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Acct Inactive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer Inactive Account - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Inactive Account Testing\",\r\n  \"account_to_description2\": \"Inactive Account Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Incorrect Sub Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer - Incorrect or missing subscription key\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Access denied\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-000000000000\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Incorrect Signature",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer - Incorrect or missing signature\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Incorrect Nonce",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer - Incorrect or missing nonce\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Incorrect Timestamp",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer - Incorrect or missing timestamp\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Incorrect Version Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer - Incorrect or missing version\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Acct IT no service Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer not permissioned for account - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1067309011\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "FX",
					"item": [
						{
							"name": "1. Post Quote/Order",
							"item": [
								{
									"name": "Post Quote, RFQ",
									"item": [
										{
											"name": "Post Quote, RFQ - Request Limit Exceeded",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ Request Limit Exceeded\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is 200, showing indicative only with limit error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"limit\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 51,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Insufficient Funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ Insufficient Funds\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is 200, showing indicative only with error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"funds\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"1142409018\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 51,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Currency Pair Invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Currency Pair Invalid\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Response showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"currency_pair\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/cad\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 20,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Both Dealt & Counter currency values provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - both dealt and counter values provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad request, showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"only dealt_amount\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 5\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Unsupported number of decimals places for currency pair",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - unsupported number of decimals places for currency pair\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad request, showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"length must be\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5.000000000000000000000000000000,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Invalid External Account Type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Invalid External Account Type\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad request, showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"length must be\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5.000000000000000000000000000000,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Inactive Account",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Inactive Account\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"pm.test(\"403 Forbidden, showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Forbidden\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"1142309010\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Account Not Provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Account Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"account_number is a required\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Currency Pair Not Provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Currency Pair Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"currency_pair is required\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - External Account Type Not Provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - External Account Type Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"external\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": \"\",\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - is buy not provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Is Buy Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"is_buy\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": \"\",\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Subscription Suspended",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Subscription Suspended\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Subscription Key",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Incorrect Subscription Key\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Signature",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Invalid Signature\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Nonce",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Incorrect Nonce\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Header Timestamp",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Incorrect Header Timestamp\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Version",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Incorrect Version\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Post Trade",
									"item": [
										{
											"name": "Post Quote, RFQ - correct version to test trade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ Buy, send to owned account\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    let json = pm.response.json()\r",
															"    pm.collectionVariables.set(\"sequential_test_quote_id1_2\", json.quote_id);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is 200, showing account type as owned\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Owned\")\r",
															"});\r",
															"\r",
															"pm.test(\"error message not present\", function () {\r",
															"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"1142409018\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 1,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 50,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - Insufficient Funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Post Trade - Insufficient Funds\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"error not message present\", function () {\r",
															"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"{{sequential_test_quote_id1_2}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - correct version to test trade Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ Buy, send to owned account\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    let json = pm.response.json()\r",
															"    pm.collectionVariables.set(\"sequential_test_quote_id2_2\", json.quote_id);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is 200, showing account type as owned\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Owned\")\r",
															"});\r",
															"\r",
															"pm.test(\"error message not present\", function () {\r",
															"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"1234567980\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 1,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 50,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - No permission for sub",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Post Trade - No permission for sub\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"error not message present\", function () {\r",
															"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"ce02753c33bc4070a1cb8167593dbcf6\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"FoMnVVRwYes0IFHaGQ4ZHccILyQqpVo1E6EfkR6QCqE=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"{{sequential_test_quote_id2_2}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - No permission for acct",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Post Trade - No permission for acct\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"error not message present\", function () {\r",
															"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"ce02753c33bc4070a1cb8167593dbcf6\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"FoMnVVRwYes0IFHaGQ4ZHccILyQqpVo1E6EfkR6QCqE=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"{{sequential_test_quote_id2_2}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - No permission for acct (no service)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"No permission for acct (no service)\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"error not message present\", function () {\r",
															"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"ce02753c33bc4070a1cb8167593dbcf6\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"FoMnVVRwYes0IFHaGQ4ZHccILyQqpVo1E6EfkR6QCqE=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"{{sequential_test_quote_id2_2}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - Currency group pair invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Currency group pair invalid\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"error not message present\", function () {\r",
															"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"{{sequential_test_quote_id1}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - Invalid quote ID provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Post Trade - Invalid quote ID provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"error not message present\", function () {\r",
															"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"{{sequential_test_quote_id1}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - Quote expired",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Post Trade - Quote Expired\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"error not message present\", function () {\r",
															"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"{{sequential_test_quote_id1}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - No quote ID provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"No quote ID provided Test - Result is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"Error Message : quote_id is required.\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"required\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - Subsription inactive",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"No quote ID provided Test - Result is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"Error Message : quote_id is required.\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"required\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Post Quote, Market Order",
									"item": [
										{
											"name": "Post Quote, RFQ - Request Limit Exceeded",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ Request Limit Exceeded\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is 200, showing indicative only with limit error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"limit\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 51,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Insufficient Funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ Insufficient Funds\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is 200, showing indicative only with error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"funds\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"1142409018\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 51,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Currency Pair Invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Currency Pair Invalid\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Response showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"currency_pair\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/cad\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 20,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Unsupported number of decimals places for currency pair",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - unsupported number of decimals places for currency pair\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad request, showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"length must be\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5.000000000000000000000000000000,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Invalid External Account Type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Invalid External Account Type\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad request, showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"length must be\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5.000000000000000000000000000000,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Inactive Account",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Inactive Account\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"pm.test(\"403 Forbidden, showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Forbidden\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"1142309010\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Account Not Provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Account Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"account_number is a required\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Currency Pair Not Provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Currency Pair Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"currency_pair is required\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - External Account Type Not Provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - External Account Type Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"external\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": \"\",\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - is buy not provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Is Buy Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"is_buy\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": \"\",\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Subscription Suspended",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Subscription Suspended\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Subscription Key",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Incorrect Subscription Key\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Signature",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Invalid Signature\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Nonce",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Incorrect Nonce\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Header Timestamp",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Incorrect Header Timestamp\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Version",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Incorrect Version\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"description": "Post folder contains:\n 1) Post Quote\n 2) Post Trade\n 3) Post FX Payment"
						},
						{
							"name": "2. Get Trade(s)",
							"item": [
								{
									"name": "Get Trade - No permission for sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trade - No permission for sub\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade/:trade-Id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade",
												":trade-Id"
											],
											"variable": [
												{
													"key": "trade-Id",
													"value": "{{sequential_test_trade_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trade - No permission for acct",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trade - No permission for acct\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade/:trade-Id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade",
												":trade-Id"
											],
											"variable": [
												{
													"key": "trade-Id",
													"value": "{{sequential_test_trade_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trade - No permission for profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trade - No permission for profile\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade/:trade-Id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade",
												":trade-Id"
											],
											"variable": [
												{
													"key": "trade-Id",
													"value": "{{sequential_test_trade_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trade - No permission for acct (service)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trade - No permission for acct (service)\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade/:trade-Id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade",
												":trade-Id"
											],
											"variable": [
												{
													"key": "trade-Id",
													"value": "{{sequential_test_trade_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trade - Invalid trade ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trade - Invalid Trade ID\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade/:trade-Id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade",
												":trade-Id"
											],
											"variable": [
												{
													"key": "trade-Id",
													"value": "{{sequential_test_trade_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trade - Account inactive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trade - Account Inactive\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade/:trade-Id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade",
												":trade-Id"
											],
											"variable": [
												{
													"key": "trade-Id",
													"value": "{{sequential_test_trade_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trade - Sub suspended",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trade - Sub suspended\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade/:trade-Id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade",
												":trade-Id"
											],
											"variable": [
												{
													"key": "trade-Id",
													"value": "{{sequential_test_trade_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trades - Invalid acct",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trades - No acct provided\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade+hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade?account-number=1234567890&begin-date=6/20/2022&sort-order=d&end-Date=7/14/2022",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade"
											],
											"query": [
												{
													"key": "account-number",
													"value": "1234567890"
												},
												{
													"key": "begin-date",
													"value": "6/20/2022"
												},
												{
													"key": "sort-order",
													"value": "d"
												},
												{
													"key": "source",
													"value": "2",
													"description": "1 for partner, 2 for portal",
													"disabled": true
												},
												{
													"key": "end-Date",
													"value": "7/14/2022"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trades - No acct provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"good response\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade+hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade?account-number=1234567980&begin-date=6/20/2022&sort-order=d&end-Date=7/14/2022",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade"
											],
											"query": [
												{
													"key": "account-number",
													"value": "1234567980",
													"description": "1234567980, 1067309011"
												},
												{
													"key": "begin-date",
													"value": "6/20/2022"
												},
												{
													"key": "sort-order",
													"value": "d"
												},
												{
													"key": "source",
													"value": "2",
													"description": "1 for partner, 2 for portal",
													"disabled": true
												},
												{
													"key": "end-Date",
													"value": "7/14/2022"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trades - Date range",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trades - Invalid Date Range\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade+hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade?account-number=1234567980&sort-order=d&end-Date=7/14/2022",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade"
											],
											"query": [
												{
													"key": "account-number",
													"value": "1234567980",
													"description": "1234567980, 1067309011"
												},
												{
													"key": "begin-date",
													"value": "6/20/2022",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "d"
												},
												{
													"key": "source",
													"value": "2",
													"description": "1 for partner, 2 for portal",
													"disabled": true
												},
												{
													"key": "end-Date",
													"value": "7/14/2022"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Get folder contains:\n 1) Get Trade\n 2) Get Trades\n 3) Get Payment Instructions"
						}
					]
				},
				{
					"name": "Internal FX",
					"item": [
						{
							"name": "4. Post Internal Quote, RFQ",
							"item": [
								{
									"name": "Post Internal Quote - Insufficient Funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, Insufficient Funds - 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : Not enough funds in debit account to cover trade.\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"funds\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1142409018\",\r\n    \"credit_account_number\": \"5091010001\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 52\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - No permission for subs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, No permission for sub - 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : This account is not authorized\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"authorized\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1067309011\",\r\n    \"credit_account_number\": \"5091010001\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 52\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - No permission for acct",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, No permission for acct - 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : This account is not authorized\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"authorized\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1067309011\",\r\n    \"credit_account_number\": \"5091010001\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 52\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - No permission for profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, No permission for profile - 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : This account is not authorized\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"authorized\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1067309011\",\r\n    \"credit_account_number\": \"5091010001\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 52\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - Currency pair invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, Invalid currency pair - 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : Currency pair is not applicable\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pair\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1142409018\",\r\n    \"credit_account_number\": \"1234567980\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 52\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - Request exceeds limits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, Request exceeds limits - 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : Quote value exceeded allowed threshold\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"exceeded\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1142409018\",\r\n    \"credit_account_number\": \"5091010001\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 525242452424\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - Account not provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, Account not provided - 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : account_number is a required parameter\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"required parameter\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1142409018\",\r\n    \"credit_account_number\": \"\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 40\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - Currency pair not provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, Currency pair not provided - 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : currency_pair is required\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pair is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1142409018\",\r\n    \"credit_account_number\": \"5091010001\",\r\n    \"currency_pair\": \"\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 40\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - No permission for credit account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, No permission for credit account\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : This account is not authorized\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"authorized\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1067309011\",\r\n    \"credit_account_number\": \"5091010001\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 40\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - Suspended subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, Subscription suspended - 401 Access denied\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : subscription is suspended\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"active subscription\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1142409018\",\r\n    \"credit_account_number\": \"5091010001\",\r\n    \"currency_pair\": \"\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 40\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4. Post Internal Quote, Market Order",
							"item": [
								{
									"name": "Post Internal Quote, Market Order - Insufficient Funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, Insufficient Funds - 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : Not enough funds in debit account to cover trade.\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"funds\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1142409018\",\r\n    \"credit_account_number\": \"5091010001\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 52\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - No permission for subs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, No permission for sub - 403 Forbidden\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : Forbidden\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1067309011\",\r\n    \"credit_account_number\": \"5091010001\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 52\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - No permission for acct",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, No permission for acct - 403 Forbidden\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : Forbidden\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1067309011\",\r\n    \"credit_account_number\": \"5091010001\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 52\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - No permission for profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, No permission for profile - 403 Forbidden\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : Forbidden\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1067309011\",\r\n    \"credit_account_number\": \"5091010001\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 52\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - Currency pair invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, Invalid currency pair - 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : Currency pair is not applicable\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pair\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1142409018\",\r\n    \"credit_account_number\": \"1234567980\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 52\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - Request exceeds limits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, Request exceeds limits - 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : Quote value exceeded allowed threshold\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"exceeded\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1142409018\",\r\n    \"credit_account_number\": \"5091010001\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 525242452424\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - Account not provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, Account not provided - 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : account_number is a required parameter\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"required parameter\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1142409018\",\r\n    \"credit_account_number\": \"\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 40\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - Currency pair not provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, Currency pair not provided - 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : currency_pair is required\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pair is required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1142409018\",\r\n    \"credit_account_number\": \"5091010001\",\r\n    \"currency_pair\": \"\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 40\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - No permission for credit account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, No permission for credit account\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : Forbidden\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1067309011\",\r\n    \"credit_account_number\": \"5091010001\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 40\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Quote - Suspended subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal FX Quote, Subscription suspended - 401 Access denied\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : subscription is suspended\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"active subscription\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote.hateoas+json",
												"type": "text",
												"description": "quote + hateoas",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder.hateoas+json",
												"type": "text",
												"description": "trade + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalquote+json",
												"description": "quote",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internalmarketorder+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"debit_account_number\": \"1142409018\",\r\n    \"credit_account_number\": \"5091010001\",\r\n    \"currency_pair\": \"\",\r\n    \"debit_amount\": 0,\r\n    \"credit_amount\": 40\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/quote",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"quote"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4. Post Internal Trade",
							"item": [
								{
									"name": "Post Internal Trade - Invalid quote ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Post Internal FX Trade, Invalid Quote ID provided - 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : expired\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"active quote\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internaltradeexecution.hateoas+json",
												"type": "text",
												"description": "tradeexecution + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internaltradeexecution+json",
												"description": "tradeexecution",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quote_id\": \"16671684618531212\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/trade",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"trade"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Trade - No quote ID provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Post Internal FX Trade, no quote ID provided - 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : quote ID is required\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"required\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internaltradeexecution.hateoas+json",
												"type": "text",
												"description": "tradeexecution + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internaltradeexecution+json",
												"description": "tradeexecution",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quote_id\": \"\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/trade",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"trade"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Trade - Quote Expired",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Post Internal FX Trade, Quote Expired - 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : expired\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"active quote\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internaltradeexecution.hateoas+json",
												"type": "text",
												"description": "tradeexecution + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internaltradeexecution+json",
												"description": "tradeexecution",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quote_id\": \"1619622187303\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/trade",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"trade"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Internal Trade - Trade previously booked",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Post Internal FX Trade, Invalid Quote ID provided - 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error Message : Quote not allowed to be executed in current state\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"current state\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internaltradeexecution.hateoas+json",
												"type": "text",
												"description": "tradeexecution + hateoas"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.internaltradeexecution+json",
												"description": "tradeexecution",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quote_id\": \"{{negative_test_quote_id1}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/fx/internal/trade",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"internal",
												"trade"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "QA",
			"item": [
				{
					"name": "Account",
					"item": [
						{
							"name": "GET Account",
							"item": [
								{
									"name": "account/list (subscription has no acct)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Call to DB is success, Subscription has no account\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - No Account",
													"//This subscription has no account toggled on in portal",
													"//----ceteris paribus",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"39a60ce0777949d7954218b67846896c\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"UKXfJaWls69B70wmhK3Ai182NjEox9GnzxdmJ5LHjFM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/list",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "account/list (subscription suspended)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Subscription suspended\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Make sure to provide a valid key for an active subscription\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"active\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Suspended",
													"//This subscription has been suspended in BOA as of 10/4/2022",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"eda8c4dfad0c4098a998b75000092436\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"l7tb3gaRNeUG53PM91YLwKgm2r2iQJyHHfysskGbm3Y=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/list",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "account/list (incorrect sub key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Subscription key missing or incorrect\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Access denied due to invalid subscription key\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Diff accts",
													"//incorrect subscription key passed",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/list",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "account/list (incorrect signature)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect signature passed\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid signature\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Diff accts",
													"//Incorrect apisecret passed",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"incorrect secret 123456789765\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/list",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "account/list (incorrect nonce)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect or missing nonce\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"//the test script has no nonce",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid signature\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Diff accts",
													"//Incorrect nonce passed. Nonce header value doesn't match rawmessage.",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = \"678\";\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: \"qrs\"\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/list",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "account/list (incorrect timestamp)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect or missing header timestamp\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid signature\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Diff accts",
													"//Incorrect timestamp passed. Timestamp header value doesn't match rawmessage.",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: \"Tue, 04 Oct 2022 15:40:21 GMT\"\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/list",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "account/list (incorrect version)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Incorrect or missing version\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid signature\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Diff accts",
													"//Incorrect version passed. Version header value doesn't match rawmessage.",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: \"9\"\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/list",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												"list"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GET History (Flag On)",
							"item": [
								{
									"name": "History - Acct # Missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Acct # Missing - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});",
													"",
													"pm.test(\"No Records Returned\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(\"records\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?is-real-time=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-03-31",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQk4LzMvMjAyMQkxMC4wMAk5MDczCUwwODNDMzEwMFAwRzJBSjYJIE9VVEdPSU5HIFdJUkUgRkVF",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Invalid Sort Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Invalid Sort Order - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid sort order\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?sort-order=dec&is-real-time=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-03-31",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "dec"
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQk4LzMvMjAyMQkxMC4wMAk5MDczCUwwODNDMzEwMFAwRzJBSjYJIE9VVEdPSU5HIFdJUkUgRkVF",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "1234567980"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Invalid Unique ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Invalid Unique ID - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Unique Id is an invalid format\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?is-real-time=true&unique-id=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-03-31",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "2"
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "1234567980"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Unique ID No Match",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Unique ID No Match - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Unique Id is an invalid format\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?is-real-time=true&unique-id=NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"description": "\"=\" is missing at the end"
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "1234567980"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Acct # Present, Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Account # Present, Invalid - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?is-real-time=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "5091019909"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Acct # Not Present",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Account # Not Present - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?is-real-time=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "0000000000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Subscription Suspended",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History - Subscription Suspended\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Access Denied\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"active\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Suspended",
													"//This subscription has been suspended in BOA QA as of 10/4/2022",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"eda8c4dfad0c4098a998b75000092436\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"l7tb3gaRNeUG53PM91YLwKgm2r2iQJyHHfysskGbm3Y=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?is-real-time=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Acct Inactive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Account is inactive - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Diff Accts",
													"//When tested with an active acct, happy path returns",
													"//This is tested with 1142309010 - inactive account",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?is-real-time=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "1142309010"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GET History (Flag Off)",
							"item": [
								{
									"name": "History - Acct # Missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Acct # Missing - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});",
													"",
													"pm.test(\"No Records Returned\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(\"records\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-03-31",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true",
													"disabled": true
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQk4LzMvMjAyMQkxMC4wMAk5MDczCUwwODNDMzEwMFAwRzJBSjYJIE9VVEdPSU5HIFdJUkUgRkVF",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Invalid Sort Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Invalid Sort Order - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid sort order\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?sort-order=dec",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-03-31",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "dec"
												},
												{
													"key": "is-real-time",
													"value": "true",
													"disabled": true
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQk4LzMvMjAyMQkxMC4wMAk5MDczCUwwODNDMzEwMFAwRzJBSjYJIE9VVEdPSU5HIFdJUkUgRkVF",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "1234567980"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Invalid Unique ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Invalid Unique ID - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Unique Id is an invalid format\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?unique-id=2",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-03-31",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true",
													"disabled": true
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "2"
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "1234567980"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Unique ID No Match",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Unique ID No Match - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Unique Id is an invalid format\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?unique-id=NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true",
													"disabled": true
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"description": "\"=\" is missing at the end"
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "1234567980"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Acct # Present, Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Account # Present, Invalid - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true",
													"disabled": true
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "5091019909"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Acct # Not Present",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Account # Not Present - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true",
													"disabled": true
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "0000000000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Subscription Suspended",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History - Subscription Suspended\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Access Denied\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"active\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Suspended",
													"//This subscription has been suspended in BOA QA as of 10/4/2022",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"eda8c4dfad0c4098a998b75000092436\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"l7tb3gaRNeUG53PM91YLwKgm2r2iQJyHHfysskGbm3Y=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?is-real-time=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "History - Acct Inactive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"GET History Account is inactive - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Diff Accts",
													"//When tested with an active acct, happy path returns",
													"//This is tested with 1142309010 - inactive account",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-UniqueId-Version",
												"value": "v3",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/api/account/:account-number/history?is-real-time=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"account",
												":account-number",
												"history"
											],
											"query": [
												{
													"key": "begin-date",
													"value": "2022-08-25",
													"disabled": true
												},
												{
													"key": "end-date",
													"value": "2022-04-01",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "a",
													"disabled": true
												},
												{
													"key": "is-real-time",
													"value": "true"
												},
												{
													"key": "page-number",
													"value": "3",
													"disabled": true
												},
												{
													"key": "page-size",
													"value": "100",
													"disabled": true
												},
												{
													"key": "unique-id",
													"value": "NDQwMDAwOTkwMQkwOC8xMC8yMDIyCS4wMQk0MDA1CVNFTiBmcm9tIDEwMDM2MDkwMTErMTQ0MDI5MDk1OTIxOAlzdHJpbmc",
													"disabled": true
												},
												{
													"key": "payment-id",
													"value": "L09UL2218A9V5SCY",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "account-number",
													"value": "1142309010"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Payment",
					"item": [
						{
							"name": "POST Payment",
							"item": [
								{
									"name": "Post",
									"item": [
										{
											"name": "POST Payment",
											"item": [
												{
													"name": "Post Payment - Pre Test for IK",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"POST payment, PreTest for IK - 201 Created\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Completed Successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"Pre-Approval\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{subscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															},
															{
																"key": "X-Auth-Signature",
																"value": "{{signature}}",
																"type": "text"
															},
															{
																"key": "X-Auth-Nonce",
																"value": "{{nonce}}",
																"type": "text"
															},
															{
																"key": "X-Auth-Timestamp",
																"value": "{{date}}",
																"type": "text"
															},
															{
																"key": "X-Auth-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "Idempotency-Key",
																"value": "2b0942ce-a597-4f04-9dc0-10f9977b159c",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"amount\": 3,\r\n\t\"originator_account_number\": \"1234567980\",\r\n\t\"sending_currency\": \"USD\",\r\n\t\"beneficiary_bank_account_number\": \"123456789\",\r\n    \"beneficiary_bank_account_is_iban\": false,\r\n\t\"beneficiary_name\": \"hello regresion testing\",\r\n\t\"beneficiary_street_address\": \"222 Weinerschnitzle Lane\",\r\n\t\"beneficiary_city\": \"San Francisco\",\r\n    \"beneficiary_region\": \"CA\",\r\n    \"beneficiary_country_code\": \"CA\",\r\n    \"beneficiary_bank_type\": \"ABA\",\r\n\t\"beneficiary_bank_routing_id\": \"322271627\",\r\n\t\"beneficiary_bank_name\": \"JPMorgan Chase Bank\",\r\n\t\"beneficiary_bank_street_address\": \"1111 Polaris Parkway\",\r\n\t\"beneficiary_bank_city\": \"Columbus\",\r\n\t\"beneficiary_bank_region\": \"OH\",\r\n    \"beneficiary_bank_postal\": \"43240\",\r\n    \"beneficiary_bank_country_code\": \"US\",\r\n    \"originator_to_beneficiary_info\": \"\"\r\n}"
														},
														"url": {
															"raw": "{{url}}/api/payment",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"payment"
															]
														}
													},
													"response": []
												},
												{
													"name": "Post Payment - Same IK, diff body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"POST Payment, Same IK, Diff Body - 409 Conflict\", function () {\r",
																	"    pm.response.to.have.status(409);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error Message : Request does not match original request with corresponding idempotency key\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"original request\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{subscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															},
															{
																"key": "X-Auth-Signature",
																"value": "{{signature}}",
																"type": "text"
															},
															{
																"key": "X-Auth-Nonce",
																"value": "{{nonce}}",
																"type": "text"
															},
															{
																"key": "X-Auth-Timestamp",
																"value": "{{date}}",
																"type": "text"
															},
															{
																"key": "X-Auth-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "Idempotency-Key",
																"value": "2b0942ce-a597-4f04-9dc0-10f9977b159c",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"amount\": 4,\r\n\t\"originator_account_number\": \"1234567980\",\r\n\t\"sending_currency\": \"USD\",\r\n\t\"beneficiary_bank_account_number\": \"123456789\",\r\n    \"beneficiary_bank_account_is_iban\": false,\r\n\t\"beneficiary_name\": \"hello regresion testing\",\r\n\t\"beneficiary_street_address\": \"222 Weinerschnitzle Lane\",\r\n\t\"beneficiary_city\": \"San Francisco\",\r\n    \"beneficiary_region\": \"CA\",\r\n    \"beneficiary_country_code\": \"CA\",\r\n    \"beneficiary_bank_type\": \"ABA\",\r\n\t\"beneficiary_bank_routing_id\": \"322271627\",\r\n\t\"beneficiary_bank_name\": \"JPMorgan Chase Bank\",\r\n\t\"beneficiary_bank_street_address\": \"1111 Polaris Parkway\",\r\n\t\"beneficiary_bank_city\": \"Columbus\",\r\n\t\"beneficiary_bank_region\": \"OH\",\r\n    \"beneficiary_bank_postal\": \"43240\",\r\n    \"beneficiary_bank_country_code\": \"US\",\r\n    \"originator_to_beneficiary_info\": \"\"\r\n}"
														},
														"url": {
															"raw": "{{url}}/api/payment",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"payment"
															]
														}
													},
													"response": []
												},
												{
													"name": "Post Payment - Pre Test for IK Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"POST payment, PreTest for IK - 201 Created\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Completed Successfully\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"Pre-Approval\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{subscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															},
															{
																"key": "X-Auth-Signature",
																"value": "{{signature}}",
																"type": "text"
															},
															{
																"key": "X-Auth-Nonce",
																"value": "{{nonce}}",
																"type": "text"
															},
															{
																"key": "X-Auth-Timestamp",
																"value": "{{date}}",
																"type": "text"
															},
															{
																"key": "X-Auth-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "Idempotency-Key",
																"value": "2b0942ce-a597-4f04-9dc0-10f9977b159c",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"amount\": 3,\r\n\t\"originator_account_number\": \"1234567980\",\r\n\t\"sending_currency\": \"USD\",\r\n\t\"beneficiary_bank_account_number\": \"123456789\",\r\n    \"beneficiary_bank_account_is_iban\": false,\r\n\t\"beneficiary_name\": \"hello regresion testing\",\r\n\t\"beneficiary_street_address\": \"222 Weinerschnitzle Lane\",\r\n\t\"beneficiary_city\": \"San Francisco\",\r\n    \"beneficiary_region\": \"CA\",\r\n    \"beneficiary_country_code\": \"CA\",\r\n    \"beneficiary_bank_type\": \"ABA\",\r\n\t\"beneficiary_bank_routing_id\": \"322271627\",\r\n\t\"beneficiary_bank_name\": \"JPMorgan Chase Bank\",\r\n\t\"beneficiary_bank_street_address\": \"1111 Polaris Parkway\",\r\n\t\"beneficiary_bank_city\": \"Columbus\",\r\n\t\"beneficiary_bank_region\": \"OH\",\r\n    \"beneficiary_bank_postal\": \"43240\",\r\n    \"beneficiary_bank_country_code\": \"US\",\r\n    \"originator_to_beneficiary_info\": \"\"\r\n}"
														},
														"url": {
															"raw": "{{url}}/api/payment",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"payment"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Get",
							"item": [
								{
									"name": "Get Payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"good response\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"payment created\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"payment_id\")\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});\r",
													"\r",
													"pm.test(\"PIM is present\", function () {\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"   //pm.globals.set(\"pim\",  jsonData[0].payment_id);\r",
													"   //pm.globals.set(\"pim_timestamp\",  jsonData[0].time_stamp);\r",
													"   postman.setEnvironmentVariable('pim', jsonData[0].payment_id);\r",
													"   postman.setEnvironmentVariable('pim_timestamp', jsonData[0].time_stamp);\r",
													"});\r",
													"\r",
													"\r",
													"setTimeout(function(){}, [1500]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"type": "text",
												"value": "{{subscriptionKey}}"
											},
											{
												"key": "Ocp-Apim-Trace",
												"type": "text",
												"value": "true"
											},
											{
												"key": "X-Auth-Signature",
												"type": "text",
												"value": "{{signature}}"
											},
											{
												"key": "X-Auth-Nonce",
												"type": "text",
												"value": "{{nonce}}"
											},
											{
												"key": "X-Auth-Timestamp",
												"type": "text",
												"value": "{{date}}"
											},
											{
												"key": "X-Auth-Version",
												"type": "text",
												"value": "{{version}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/api/payment/:payment-id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"payment",
												":payment-id"
											],
											"variable": [
												{
													"key": "payment-id",
													"value": "L09790527G9T1ID9",
													"description": "L08OK38350ZS0WKM, L09790527G9T1ID9"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Payments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"good response\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"payment created\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"payment_id\")\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});\r",
													"\r",
													"pm.test(\"PIM is present\", function () {\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"   //pm.globals.set(\"pim\",  jsonData[0].payment_id);\r",
													"   //pm.globals.set(\"pim_timestamp\",  jsonData[0].time_stamp);\r",
													"   postman.setEnvironmentVariable('pim', jsonData.records[0].payment_id);\r",
													"   postman.setEnvironmentVariable('pim_timestamp', jsonData.records[0].time_stamp);\r",
													"});\r",
													"\r",
													"\r",
													"setTimeout(function(){}, [1500]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"type": "text",
												"value": "{{subscriptionKey}}"
											},
											{
												"key": "Ocp-Apim-Trace",
												"type": "text",
												"value": "true"
											},
											{
												"key": "X-Auth-Signature",
												"type": "text",
												"value": "{{signature}}"
											},
											{
												"key": "X-Auth-Nonce",
												"type": "text",
												"value": "{{nonce}}"
											},
											{
												"key": "X-Auth-Timestamp",
												"type": "text",
												"value": "{{date}}"
											},
											{
												"key": "X-Auth-Version",
												"type": "text",
												"value": "{{version}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/api/payment?account-number=1234567980&begin-date=07/01/2022&end-date=07/30/2022&page-size=100&page-number=1&sort-order=asc",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"payment"
											],
											"query": [
												{
													"key": "account-number",
													"value": "1234567980"
												},
												{
													"key": "begin-date",
													"value": "07/01/2022"
												},
												{
													"key": "end-date",
													"value": "07/30/2022"
												},
												{
													"key": "page-size",
													"value": "100"
												},
												{
													"key": "page-number",
													"value": "1"
												},
												{
													"key": "sort-order",
													"value": "asc"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Transfer",
					"item": [
						{
							"name": "POST Internal Transfer",
							"item": [
								{
									"name": "Internal Transfer - PreTest for IK",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer PreTest for IK - 201 Created\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Completed Successfully\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Completed\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Pre Test for IK\",\r\n  \"account_to_description2\": \"Pre Test for IK\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Same IK, Diff Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer Same IK, Diff Body - 409 Conflict\", function () {",
													"    pm.response.to.have.status(409);",
													"});",
													"",
													"pm.test(\"Error Message : Request does not match original request with corresponding idempotency key\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"original request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Same IK, Diff Body\",\r\n  \"account_to_description2\": \"Same IK, Diff Body\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - JSON Formatting Corrupt",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer JSON Formatting Corrupt - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Validation errors occurred\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"validation errors\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"JSON Formatting Corrupt\",\r\n  \"account_to_description2\": \"JSON Formatting Corrupt\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Max Field Length Exceeded",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer Max Field Length Exceeded - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Length must be less than or equal to 40 characters\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Max Field Length Exceeded Testing.. so the description has to be really really long\",\r\n  \"account_to_description2\": \"Max Field Length Exceeded Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Amount Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer Amount Invalid - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Amount is less than or equal to 0\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"less than\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 0,\r\n  \"account_from_description2\": \"Amount Invalid 0\",\r\n  \"account_to_description2\": \"Amount Invalid 0\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Required fields not provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer Required fields not provided - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : account_number_from is required\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"required\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Required fields not provided\",\r\n  \"account_to_description2\": \"Required fields not provided\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - IK not a GUID or UUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer IK not a GUID or UUID - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Idempotency Key is not a valid GUID\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"GUID\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "0",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"IK not a GUID or UUID, passed 0\",\r\n  \"account_to_description2\": \"IK not a GUID or UUID, passed 0\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Limit Exceeded",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer Limit Exceeded - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : limit has been exceeded by $$$\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"limit\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 9999999999999,\r\n  \"account_from_description2\": \"Limit Exceeded testing\",\r\n  \"account_to_description2\": \"Limit Exceeded testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Insufficient Funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer Insufficient Funds - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Insufficient available balance\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Insufficient\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Diff accts",
													"//Zero Balance Account used : 1142409018",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142409018\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Insufficient Fund Testing\",\r\n  \"account_to_description2\": \"Insufficient Fund Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Acct IT no service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer not permissioned for account - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Diff accts",
													"//No IT service on for 4400009902 (account_from)",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"4400009902\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Acct no IT service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer service not permissioned for account - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Diff accts",
													"//IT service on, permission off for 1067309011 (account_from)",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1067309011\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Suspended Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer, Suspended Subscription - 401 Access Denied\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Access Denied\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Suspended",
													"//This subscription has been suspended in BOA QA as of 10/4/2022",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"eda8c4dfad0c4098a998b75000092436\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"l7tb3gaRNeUG53PM91YLwKgm2r2iQJyHHfysskGbm3Y=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142409018\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Acct Inactive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer Inactive Account - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Diff accts",
													"//Inactive account used : 1142309010",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Inactive Account Testing\",\r\n  \"account_to_description2\": \"Inactive Account Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Incorrect Sub Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer - Incorrect or missing subscription key\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Access denied\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-000000000000\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Incorrect Signature",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer - Incorrect or missing signature\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Incorrect Nonce",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer - Incorrect or missing nonce\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Incorrect Timestamp",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer - Incorrect or missing timestamp\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Internal Transfer - Incorrect Version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer - Incorrect or missing version\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "POST SEN Transfer",
							"item": [
								{
									"name": "SEN Transfer - PreTest for IK",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer PreTest for IK - 201 Created\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Completed Successfully\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Completed\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "12acdf0e-f42c-481b-885f-57762146f46d",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Pre Test for IK\",\r\n  \"account_to_description2\": \"Pre Test for IK\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Same IK, Diff Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer Same IK, Diff Body - 409 Conflict\", function () {",
													"    pm.response.to.have.status(409);",
													"});",
													"",
													"pm.test(\"Error Message : Request does not match original request with corresponding idempotency key\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"original request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "12acdf0e-f42c-481b-885f-57762146f46d",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Same IK, Diff Body\",\r\n  \"account_to_description2\": \"Same IK, Diff Body\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - JSON Formatting Corrupt",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer JSON Formatting Corrupt - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Validation errors occurred\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"validation errors\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"JSON Formatting Corrupt\",\r\n  \"account_to_description2\": \"JSON Formatting Corrupt\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Max Field Length Exceeded",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer Max Field Length Exceeded - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Length must be less than or equal to 40 characters\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Max Field Length Exceeded Testing.. so the description has to be really really long\",\r\n  \"account_to_description2\": \"Max Field Length Exceeded Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Amount Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer Amount Invalid - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Amount is less than or equal to 0\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"less than\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 0,\r\n  \"account_from_description2\": \"Amount Invalid 0\",\r\n  \"account_to_description2\": \"Amount Invalid 0\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Required fields not provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer Required fields not provided - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : account_number_from is required\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"required\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Required fields not provided\",\r\n  \"account_to_description2\": \"Required fields not provided\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - IK not a GUID or UUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer IK not a GUID or UUID - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Idempotency Key is not a valid GUID\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"GUID\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "0",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"IK not a GUID or UUID, passed 0\",\r\n  \"account_to_description2\": \"IK not a GUID or UUID, passed 0\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Limit Exceeded",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"SEN Transfer Limit Exceeded - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : limit has been exceeded by $$$\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"limit\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1234567980\",\r\n  \"account_number_to\": \"1067309011\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 9999999999999,\r\n  \"account_from_description2\": \"Limit Exceeded testing\",\r\n  \"account_to_description2\": \"Limit Exceeded testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/sen",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"sen"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Insufficient Funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer Insufficient Funds - 400 Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error Message : Insufficient available balance\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Insufficient\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Diff accts",
													"//Zero Balance Account used : 1142409018",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142409018\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Insufficient Fund Testing\",\r\n  \"account_to_description2\": \"Insufficient Fund Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Acct IT no service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer not permissioned for account - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Diff accts",
													"//No IT service on for 4400009902 (account_from)",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"4400009902\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Acct no IT service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer service not permissioned for account - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Diff accts",
													"//IT service on, permission off for 1067309011 (account_from)",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1067309011\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Suspended Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer, Suspended Subscription - 401 Access Denied\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Access Denied\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Suspended",
													"//This subscription has been suspended in BOA QA as of 10/4/2022",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"eda8c4dfad0c4098a998b75000092436\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"l7tb3gaRNeUG53PM91YLwKgm2r2iQJyHHfysskGbm3Y=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142409018\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Acct Inactive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer Inactive Account - 403 Forbidden\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Error Message : Forbidden\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
													"});",
													"",
													"//Subscription : PM v3 QA Regression Sub - Diff accts",
													"//Inactive account used : 1142309010",
													"//----ceteris paribus"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Inactive Account Testing\",\r\n  \"account_to_description2\": \"Inactive Account Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Incorrect Sub Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer - Incorrect or missing subscription key\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Access denied\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"00000000-0000-0000-0000-000000000000\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Incorrect Signature",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer - Incorrect or missing signature\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Incorrect Nonce",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer - Incorrect or missing nonce\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + utcDate + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Incorrect Timestamp",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer - Incorrect or missing timestamp\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + ver + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								},
								{
									"name": "SEN Transfer - Incorrect Version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Internal Transfer - Incorrect or missing version\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error Message : Invalid signature\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const { v4: uuidv4 } = require('uuid');\r",
													"\r",
													"let subscriptionKey = \"a7e58550fb814a21a4b823ac168f0e9b\";\r",
													"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
													"let apiSecret = \"Cuq2SaX18+j1HXeXHY/oKhrkOtZ65TSENgNDcpplcDM=\";\r",
													"let ver = pm.variables.get('version');\r",
													"let tracing = pm.variables.get('tracing');\r",
													"let utcDate = (new Date()).toISOString();\r",
													"let nonce = uuidv4();\r",
													"\r",
													"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
													"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
													"\r",
													"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
													"let url = encodeURI(uriParts[0]);\r",
													"if (uriParts.length > 1) {\r",
													"    url = url + \"?\" + uriParts[1]\r",
													"}\r",
													"\r",
													"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
													"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + body;\r",
													"\r",
													"console.log(\"Raw message: \" + rawMessage)\r",
													"// Generate HMAC SHA256 or 512 signature\r",
													"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
													"\r",
													"if (subscriptionGuid !== undefined) {\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Id',\r",
													"        value: subscriptionGuid\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.request.headers.upsert({\r",
													"        key: 'X-made-Subscription-Name',\r",
													"        value: \"Postman local test\"\r",
													"    });\r",
													"}\r",
													"\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Subscription-Key',\r",
													"    value: subscriptionKey\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'Ocp-Apim-Trace',\r",
													"    value: tracing\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Signature',\r",
													"    value: signature\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Nonce',\r",
													"    value: nonce\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Timestamp',\r",
													"    value: utcDate\r",
													"}\r",
													");\r",
													"pm.request.headers.upsert({\r",
													"    key: 'X-Auth-Version',\r",
													"    value: ver\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Idempotency-Key",
												"value": "b465e15a-2bc3-48f1-b3cd-7f7cd5e03218",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"account_number_from\": \"1142309010\",\r\n  \"account_number_to\": \"1234567980\",\r\n  \"currency\": \"USD\",\r\n  \"amount\": 1,\r\n  \"account_from_description2\": \"Incorrect/Missing Sub Key Testing\",\r\n  \"account_to_description2\": \"Incorrect/Missing Sub Key Testing\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/transfer/internal",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"transfer",
												"internal"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "FX",
					"item": [
						{
							"name": "1. Post Quote/Order",
							"item": [
								{
									"name": "Post Quote, RFQ",
									"item": [
										{
											"name": "Post Quote, RFQ - Request Limit Exceeded",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ Request Limit Exceeded\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is 200, showing indicative only with limit error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"limit\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 51,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Insufficient Funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ Insufficient Funds\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is 200, showing indicative only with error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"funds\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"1142409018\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 51,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Currency Pair Invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Currency Pair Invalid\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Response showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"currency_pair\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/cad\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 20,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Both Dealt & Counter currency values provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - both dealt and counter values provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad request, showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"only dealt_amount\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 5\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Unsupported number of decimals places for currency pair",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - unsupported number of decimals places for currency pair\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad request, showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"length must be\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5.000000000000000000000000000000,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Invalid External Account Type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Invalid External Account Type\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad request, showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"length must be\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5.000000000000000000000000000000,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Inactive Account",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Inactive Account\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"pm.test(\"403 Forbidden, showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Forbidden\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"1142309010\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Account Not Provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Account Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"account_number is a required\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Currency Pair Not Provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Currency Pair Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"currency_pair is required\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - External Account Type Not Provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - External Account Type Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"external\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": \"\",\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - is buy not provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Is Buy Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"is_buy\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": \"\",\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Dealt & Counter Amount Not Provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Dealt & Counter Amount Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"dealt\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": ,\r\n    \"counter_amount\": \r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Subscription Suspended",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Subscription Suspended\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Subscription Key",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Incorrect Subscription Key\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Signature",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Invalid Signature\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Nonce",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Incorrect Nonce\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Header Timestamp",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Incorrect Header Timestamp\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Version",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Incorrect Version\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Post Trade",
									"item": [
										{
											"name": "Post Trade - Insufficient Funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Post Trade - Insufficient Funds\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"error not message present\", function () {\r",
															"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"{{sequential_test_quote_id1}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - No permission for sub",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Post Trade - No permission for sub\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"error not message present\", function () {\r",
															"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"{{sequential_test_quote_id1}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - No permission for acct",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Post Trade - No permission for acct\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"error not message present\", function () {\r",
															"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"{{sequential_test_quote_id1}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - No permission for acct (no service)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"No permission for acct (no service)\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"error not message present\", function () {\r",
															"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"{{sequential_test_quote_id1}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - Currency group pair invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Currency group pair invalid\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"error not message present\", function () {\r",
															"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"{{sequential_test_quote_id1}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - Invalid quote ID provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Post Trade - Invalid quote ID provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"error not message present\", function () {\r",
															"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"{{sequential_test_quote_id1}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - Quote expired",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Post Trade - Quote Expired\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"error not message present\", function () {\r",
															"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"{{sequential_test_quote_id1}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - Indicative quote",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Post Trade - Indicative Quote\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"error not message present\", function () {\r",
															"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"{{sequential_test_quote_id1}}\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - No quote ID provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"No quote ID provided Test - Result is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"Error Message : quote_id is required.\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"required\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Trade - Subsription inactive",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"No quote ID provided Test - Result is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															" \r",
															"});\r",
															"\r",
															"pm.test(\"Error Message : quote_id is required.\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"required\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{subscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "X-Auth-Signature",
														"value": "{{signature}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Nonce",
														"value": "{{nonce}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Timestamp",
														"value": "{{date}}",
														"type": "text"
													},
													{
														"key": "X-Auth-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution.hateoas+json",
														"type": "text",
														"description": "tradeexecution + hateoas"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.tradeexecution+json",
														"description": "tradeexecution",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"quote_id\": \"\"\r\n}"
												},
												"url": {
													"raw": "{{url}}/api/fx/trade?",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"trade"
													],
													"query": [
														{
															"key": "",
															"value": null
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Post Quote, Market Order",
									"item": [
										{
											"name": "Post Quote, RFQ - Request Limit Exceeded",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ Request Limit Exceeded\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is 200, showing indicative only with limit error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"limit\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 51,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Insufficient Funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ Insufficient Funds\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is 200, showing indicative only with error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"funds\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"1142409018\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 51,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Currency Pair Invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Currency Pair Invalid\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Response showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"currency_pair\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/cad\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 20,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Both Dealt & Counter currency values provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - both dealt and counter values provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad request, showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"only dealt_amount\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 5\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Unsupported number of decimals places for currency pair",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - unsupported number of decimals places for currency pair\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad request, showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"length must be\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5.000000000000000000000000000000,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Invalid External Account Type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Invalid External Account Type\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad request, showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"length must be\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5.000000000000000000000000000000,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Inactive Account",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Inactive Account\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"pm.test(\"403 Forbidden, showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Forbidden\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"1142309010\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Account Not Provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Account Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"account_number is a required\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Currency Pair Not Provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Currency Pair Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"currency_pair is required\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - External Account Type Not Provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - External Account Type Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"external\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": \"\",\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - is buy not provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Is Buy Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"is_buy\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": \"\",\r\n    \"dealt_amount\": 5,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Dealt & Counter Amount Not Provided",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Dealt & Counter Amount Not Provided\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"400 Bad Request, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"dealt\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"00000000-0000-0000-0000-0000000000006\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"00000000-0000-0000-0000-000000000000=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": ,\r\n    \"counter_amount\": \r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Subscription Suspended",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Subscription Suspended\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Subscription Key",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Incorrect Subscription Key\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Signature",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Invalid Signature\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Nonce",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Incorrect Nonce\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Header Timestamp",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Incorrect Header Timestamp\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										},
										{
											"name": "Post Quote, RFQ - Incorrect Version",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RFQ - Incorrect Version\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"401 Access Denied, Showing error message\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"Access denied\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const { v4: uuidv4 } = require('uuid');\r",
															"\r",
															"let subscriptionKey = \"42adcc0481d747f1b3510007a309bf8b\";\r",
															"let subscriptionGuid = pm.variables.get('subscriptionGuid');\r",
															"let apiSecret = \"uWYZUICIPECkv6v2E0uK7T5F6zkDGmsOdedFJk0j8Eo=\";\r",
															"let ver = pm.variables.get('version');\r",
															"let tracing = pm.variables.get('tracing');\r",
															"let utcDate = (new Date()).toISOString();\r",
															"let nonce = uuidv4();\r",
															"\r",
															"let uri = pm.environment.values.substitute(pm.request.url, null, false);\r",
															"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";\r",
															"\r",
															"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)\r",
															"let url = encodeURI(uriParts[0]);\r",
															"if (uriParts.length > 1) {\r",
															"    url = url + \"?\" + uriParts[1]\r",
															"}\r",
															"\r",
															"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";\r",
															"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce +utcDate + ver + body;\r",
															"\r",
															"console.log(\"Raw message: \" + rawMessage)\r",
															"// Generate HMAC SHA256 or 512 signature\r",
															"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));\r",
															"\r",
															"if (subscriptionGuid !== undefined) {\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Id',\r",
															"        value: subscriptionGuid\r",
															"    });\r",
															"\r",
															"\r",
															"    pm.request.headers.upsert({\r",
															"        key: 'X-made-Subscription-Name',\r",
															"        value: \"Postman local test\"\r",
															"    });\r",
															"}\r",
															"\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Subscription-Key',\r",
															"    value: subscriptionKey\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'Ocp-Apim-Trace',\r",
															"    value: tracing\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Signature',\r",
															"    value: signature\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Nonce',\r",
															"    value: nonce\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Timestamp',\r",
															"    value: utcDate\r",
															"}\r",
															");\r",
															"pm.request.headers.upsert({\r",
															"    key: 'X-Auth-Version',\r",
															"    value: ver\r",
															"}\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.made.quote.hateoas+json",
														"type": "text",
														"description": "quote + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder.hateoas+json",
														"type": "text",
														"description": "trade + hateoas",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text",
														"description": "standard json",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.quote+json",
														"description": "quote",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/vnd.made.marketorder+json",
														"description": "trade",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_number\": \"4400009902\",\r\n    \"currency_pair\": \"eur/usd\",\r\n    \"external_account_type\": 2,\r\n    \"is_buy\": true,\r\n    \"dealt_amount\": 1,\r\n    \"counter_amount\": 0\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/fx/quote",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"fx",
														"quote"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"description": "Post folder contains:\n 1) Post Quote\n 2) Post Trade\n 3) Post FX Payment"
						},
						{
							"name": "2. Get Trade(s)",
							"item": [
								{
									"name": "Get Trade - No permission for sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trade - No permission for sub\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade/:trade-Id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade",
												":trade-Id"
											],
											"variable": [
												{
													"key": "trade-Id",
													"value": "{{sequential_test_trade_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trade - No permission for acct",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trade - No permission for acct\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade/:trade-Id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade",
												":trade-Id"
											],
											"variable": [
												{
													"key": "trade-Id",
													"value": "{{sequential_test_trade_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trade - No permission for profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trade - No permission for profile\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade/:trade-Id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade",
												":trade-Id"
											],
											"variable": [
												{
													"key": "trade-Id",
													"value": "{{sequential_test_trade_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trade - No permission for acct (service)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trade - No permission for acct (service)\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade/:trade-Id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade",
												":trade-Id"
											],
											"variable": [
												{
													"key": "trade-Id",
													"value": "{{sequential_test_trade_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trade - Invalid trade ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trade - Invalid Trade ID\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade/:trade-Id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade",
												":trade-Id"
											],
											"variable": [
												{
													"key": "trade-Id",
													"value": "{{sequential_test_trade_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trade - Account inactive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trade - Account Inactive\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade/:trade-Id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade",
												":trade-Id"
											],
											"variable": [
												{
													"key": "trade-Id",
													"value": "{{sequential_test_trade_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trade - Sub suspended",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trade - Sub suspended\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{subscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "X-Auth-Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Nonce",
												"value": "{{nonce}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Timestamp",
												"value": "{{date}}",
												"type": "text"
											},
											{
												"key": "X-Auth-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade/:trade-Id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade",
												":trade-Id"
											],
											"variable": [
												{
													"key": "trade-Id",
													"value": "{{sequential_test_trade_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trades - Invalid acct",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trades - No acct provided\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade+hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade?account-number=1234567980&begin-date=6/20/2022&sort-order=d&end-Date=7/14/2022",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade"
											],
											"query": [
												{
													"key": "account-number",
													"value": "1234567980",
													"description": "1234567980, 1067309011"
												},
												{
													"key": "begin-date",
													"value": "6/20/2022"
												},
												{
													"key": "sort-order",
													"value": "d"
												},
												{
													"key": "source",
													"value": "2",
													"description": "1 for partner, 2 for portal",
													"disabled": true
												},
												{
													"key": "end-Date",
													"value": "7/14/2022"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trades - No acct provided",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"good response\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade+hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade?account-number=1234567980&begin-date=6/20/2022&sort-order=d&end-Date=7/14/2022",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade"
											],
											"query": [
												{
													"key": "account-number",
													"value": "1234567980",
													"description": "1234567980, 1067309011"
												},
												{
													"key": "begin-date",
													"value": "6/20/2022"
												},
												{
													"key": "sort-order",
													"value": "d"
												},
												{
													"key": "source",
													"value": "2",
													"description": "1 for partner, 2 for portal",
													"disabled": true
												},
												{
													"key": "end-Date",
													"value": "7/14/2022"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trades - Date range",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get Trades - Invalid Date Range\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade+hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade?account-number=1234567980&sort-order=d&end-Date=7/14/2022",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade"
											],
											"query": [
												{
													"key": "account-number",
													"value": "1234567980",
													"description": "1234567980, 1067309011"
												},
												{
													"key": "begin-date",
													"value": "6/20/2022",
													"disabled": true
												},
												{
													"key": "sort-order",
													"value": "d"
												},
												{
													"key": "source",
													"value": "2",
													"description": "1 for partner, 2 for portal",
													"disabled": true
												},
												{
													"key": "end-Date",
													"value": "7/14/2022"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Trades - Inactive sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"good response\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"error not message present\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ERRORMSG\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"description": "standard json",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade+json",
												"description": "trade",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/vnd.made.trade.hateoas+json",
												"description": "trade+hateoas",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/api/fx/trade?account-number=1234567980&begin-date=6/20/2022&sort-order=d&end-Date=7/14/2022",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"fx",
												"trade"
											],
											"query": [
												{
													"key": "account-number",
													"value": "1234567980",
													"description": "1234567980, 1067309011"
												},
												{
													"key": "begin-date",
													"value": "6/20/2022"
												},
												{
													"key": "sort-order",
													"value": "d"
												},
												{
													"key": "source",
													"value": "2",
													"description": "1 for partner, 2 for portal",
													"disabled": true
												},
												{
													"key": "end-Date",
													"value": "7/14/2022"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Get folder contains:\n 1) Get Trade\n 2) Get Trades\n 3) Get Payment Instructions"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const { v4: uuidv4 } = require('uuid');",
					"",
					"let subscriptionKey = pm.variables.get('subscriptionKey');",
					"let subscriptionGuid = pm.variables.get('subscriptionGuid');",
					"let apiSecret = pm.variables.get('clientSecret');",
					"let ver = pm.variables.get('version');",
					"let tracing = pm.variables.get('tracing');",
					"let utcDate = (new Date()).toISOString();",
					"let nonce = uuidv4();",
					"",
					"let uri = pm.environment.values.substitute(pm.request.url, null, false);",
					"uri = pm.collectionVariables.values.substitute(pm.request.url, null, false) + \"\";",
					"",
					"let uriParts = uri.replace(/#+$/, \"\").split(/\\?(.+)/)",
					"let url = encodeURI(uriParts[0]);",
					"if (uriParts.length > 1) {",
					"    url = url + \"?\" + uriParts[1]",
					"}",
					"",
					"let body = pm.request.body !== undefined ? pm.collectionVariables.values.substitute(pm.environment.values.substitute(pm.request.body, null, false), null, false) : \"\";",
					"let rawMessage = \"made\" + \" \" + subscriptionKey + url + nonce + utcDate + ver + body;",
					"",
					"console.log(\"Raw message: \" + rawMessage)",
					"// Generate HMAC SHA256 or 512 signature",
					"let signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA512(rawMessage, apiSecret));",
					"",
					"if (subscriptionGuid !== undefined) {",
					"    pm.request.headers.upsert({",
					"        key: 'X-made-Subscription-Id',",
					"        value: subscriptionGuid",
					"    });",
					"",
					"",
					"    pm.request.headers.upsert({",
					"        key: 'X-made-Subscription-Name',",
					"        value: \"Postman local test\"",
					"    });",
					"}",
					"",
					"pm.request.headers.upsert({",
					"    key: 'Ocp-Apim-Subscription-Key',",
					"    value: subscriptionKey",
					"}",
					");",
					"pm.request.headers.upsert({",
					"    key: 'Ocp-Apim-Trace',",
					"    value: tracing",
					"}",
					");",
					"pm.request.headers.upsert({",
					"    key: 'X-Auth-Signature',",
					"    value: signature",
					"}",
					");",
					"pm.request.headers.upsert({",
					"    key: 'X-Auth-Nonce',",
					"    value: nonce",
					"}",
					");",
					"pm.request.headers.upsert({",
					"    key: 'X-Auth-Timestamp',",
					"    value: utcDate",
					"}",
					");",
					"pm.request.headers.upsert({",
					"    key: 'X-Auth-Version',",
					"    value: ver",
					"}",
					");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "sequential_test_quote_id2",
			"value": ""
		},
		{
			"key": "sequential_test_quote_id1",
			"value": ""
		},
		{
			"key": "sequential_test_quote_id3",
			"value": ""
		},
		{
			"key": "sequential_test_quote_id4",
			"value": ""
		},
		{
			"key": "negative_test_quote_id1",
			"value": ""
		},
		{
			"key": "negative_test_indicative_quote_id",
			"value": ""
		},
		{
			"key": "negative_test_trade_id1",
			"value": ""
		},
		{
			"key": "sequential_test_quote_id1_2",
			"value": ""
		},
		{
			"key": "sequential_test_quote_id2_2",
			"value": ""
		}
	]
}